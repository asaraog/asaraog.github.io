[{"categories":null,"content":" Image credit: R logo, Gopher ","date":"2024-05-08","objectID":"/hi/Week2/:0:0","tags":null,"title":"Comparing Golang with Python/R","uri":"/hi/Week2/"},{"categories":null,"content":"Evaluating Go Golang is a compiled language that is more verbose but is said to run faster compared to R/Python. Here, Golang’s performance and runtime is benchmarked against Python and/or R with various cases: Performing least squares regression of the Anscombe Quartet (1973) Computing summary statistics of the California Housing Prices (Miller 2015) Web crawling and scraping of Wikipedia Identify anomalies in the MNIST dataset ","date":"2024-05-08","objectID":"/hi/Week2/:1:0","tags":null,"title":"Comparing Golang with Python/R","uri":"/hi/Week2/"},{"categories":null,"content":"Least squares regression with Python and R See Github repository for further details. The Golang implementation is benchmarked for runtime with a previous implementation by Miller (2015) in Python/R as a reference. Least squares regression is implemented in Golang using the stats package. Python was significantly slower compared to R and Go implementations with runtimes of 1.36s, 0.04s, 0.173s for Python, R and Go. While R was less verbose and a bit faster than Go, Go’s testing package ensured identitcal least squares coefficients of 0.5 and 3 for each Anscombe dataset during development. ","date":"2024-05-08","objectID":"/hi/Week2/:1:1","tags":null,"title":"Comparing Golang with Python/R","uri":"/hi/Week2/"},{"categories":null,"content":"Summary statistics with Python and R See Github repository for further details. The Golang implementation is done using the stats package. Runtimes are compared using ’time’ before commands in the command line to compare with Python’s pandas.describe() and R’s summary functions. The operations are run 100 times for each implementation. Python was significantly faster compared to R and Go implementations with ‘real’ runtimes of 2.27s, 4.10s, 5.02s for Python, R and Go respectively. While Python and R were less verbose and a bit faster than Go, Go’s testing package ensured similar summary statistics as Python for each of the seven variables (value, income, age, rooms, bedrooms, pop, hh) during development. ","date":"2024-05-08","objectID":"/hi/Week2/:1:2","tags":null,"title":"Comparing Golang with Python/R","uri":"/hi/Week2/"},{"categories":null,"content":"Web crawling and scraping with Python See Github repository for further details. This project implemented web crawling and scraping of Wikipedia (described by Chanda 2021) webpages in Golang using Colly. The Go implementation is benchmarked for runtime using ’time’ before commands in the command line to compare with Python’s implementation for the same 10 webpages using scrapy. Python was significantly slower compared Go implementations with ‘real’ runtimes of 15.9s and 0.6s for Python and Go respectively. While Python was less verbose than Go, Go is more scalable and has concurrency support to allow for even faster processing using Colly. ","date":"2024-05-08","objectID":"/hi/Week2/:1:3","tags":null,"title":"Comparing Golang with Python/R","uri":"/hi/Week2/"},{"categories":null,"content":"Identifying anomalies using isolation forests with Python and R See Github repository for further details. Isolation forests are used as an unsupervised learning method to identify anomalies or outliers. It was introduced by Liu 2008 by observing that path lengths for anomalies were significantly SHORTER by averaging over many trees. He introduces an anomaly score to normalize comparisons with HIGHER scores indicating more abnormality. Hyperparameters were kept the same across languages with 1000 trees and 256 samples. The go-iforest package was used for the analysis in Go. Comparison code for R and Python was adapted from Miller 2023. Runtimes were significantly lower in Golang with runtimes of 5.66s, 19.02s, and 1m 42.87s for Golang, R and Python respectively. This is likely due to the goroutines utilized in the go-iforest package. ","date":"2024-05-08","objectID":"/hi/Week2/:1:4","tags":null,"title":"Comparing Golang with Python/R","uri":"/hi/Week2/"},{"categories":null,"content":"Overview Programs written using Golang had similar performances to Python/R in basic statistical learning applications such as least squares regression and summary statistics. Efficient results were obtained utilizing test-driven development. In applications with more scalability, Golang performed very well. For both web scraping/crawling and identifying anomalies, Golang performs more than 10 times faster than Python. This could be attributed to Golang’s concurrency support with goroutines. ","date":"2024-05-08","objectID":"/hi/Week2/:2:0","tags":null,"title":"Comparing Golang with Python/R","uri":"/hi/Week2/"},{"categories":null,"content":"References Anscombe, F. J. 1973. “Graphs in Statistical Analysis.” The American Statistician 27 (1): 17–21. https://doi.org/10.2307/2682899. Chanda, Subha. 2021. “Web Scraping with Go.” ScrapingBee. 2021. https://www.scrapingbee.com/blog/web-scraping-go/. Liu, Fei Tony, Kai Ming Ting, and Zhi-Hua Zhou. 2008. “Isolation Forest.”. In ICDM ‘08: Proceedings of the 2008 Eighth IEEE International Conference on Data Mining, December 2008, 413–422. Miller, Tom. “Testing Go for Statistics,”. MSDS 431: Data Engineering with Go. Course at Northwestern University, Chicago, IL, June 19, 2023. Miller, Tom. “Working with Data Frames,”. MSDS 431: Data Engineering with Go. Course at Northwestern University, Chicago, IL, June 19, 2023. Miller, Tom. “Command-Line Applications,”. MSDS 431: Data Engineering with Go. Course at Northwestern University, Chicago, IL, July 1, 2023. Miller, Tom. “Crawling and Scraping the Web,”. MSDS 431: Data Engineering with Go. Course at Northwestern University, Chicago, IL, July 2, 2023. ","date":"2024-05-08","objectID":"/hi/Week2/:3:0","tags":null,"title":"Comparing Golang with Python/R","uri":"/hi/Week2/"},{"categories":null,"content":"A blog (a truncation of “weblog”) is an informational website published on the World Wide Web consisting of discrete, often informal diary-style text entries (posts). Posts are typically displayed in reverse chronological order so that the most recent post appears first, at the top of the web page. Until 2009, blogs were usually the work of a single individual,[citation needed] occasionally of a small group, and often covered a single subject or topic. In the 2010s, “multi-author blogs” (MABs) emerged, featuring the writing of multiple authors and sometimes professionally edited. MABs from newspapers, other media outlets, universities, think tanks, advocacy groups, and similar institutions account for an increasing quantity of blog traffic. The rise of Twitter and other “microblogging” systems helps integrate MABs and single-author blogs into the news media. Blog can also be used as a verb, meaning to maintain or add content to a blog. ","date":"2023-02-20","objectID":"/hi/first_post3/:0:0","tags":null,"title":"My First Post3","uri":"/hi/first_post3/"},{"categories":null,"content":" Partial image credit ","date":"2024-05-01","objectID":"/hi/Week3/:0:0","tags":null,"title":"Building this website with Hugo","uri":"/hi/Week3/"},{"categories":null,"content":"Why? Golang is a compiled language designed for today’s multi-processor, scalable, high-performance systems. Known for concurrent data processing, Uber uses Golang on the backend. Static site generators such as Hugo were developed recently using Golang. Other platforms have inherited dependency chains that can lead to infeasible build times. For example, Cloudfare recently migrated from Gatsby. ","date":"2024-05-01","objectID":"/hi/Week3/:1:0","tags":null,"title":"Building this website with Hugo","uri":"/hi/Week3/"},{"categories":null,"content":"Demo I first created a demo website using the Hugo Winston theme. This theme does have a Live Demo which made it simple to deploy from Github onto Netlify. All descriptions are fictional and generated using ChatGPT. ","date":"2024-05-01","objectID":"/hi/Week3/:1:1","tags":null,"title":"Building this website with Hugo","uri":"/hi/Week3/"},{"categories":null,"content":"Saraogee.com I had several requirements in mind for my website: Public Comments such as Valine Site Analytics such as Google Analytics Search such as Fuse.js The FixIt theme was a great starting point for my website. I made some changes to the categories in the layout and added support for Hindi. The website continuously deploys from updates I make in the file directory via Github Pages. ","date":"2024-05-01","objectID":"/hi/Week3/:1:2","tags":null,"title":"Building this website with Hugo","uri":"/hi/Week3/"},{"categories":null,"content":"Running the website locally 1. Install Hugo Please follow the official installation guide. 2. Import Hugo site locally Download or git clone this project onto local machine into folder on local machine. git clone https://github.com/asaraog/msds431week3.git cd msds431week3 cd exampleSite hugo server or git clone https://github.com/asaraog/asaraog.github.io.git cd asaraog.github.io hugo server 3. Deploy it Now enter localhost:1313 in the address bar of your browser. Files can then be changed and then committed/pushed when complete to git. Once pushed to git, the website can be deployed. ","date":"2024-05-01","objectID":"/hi/Week3/:2:0","tags":null,"title":"Building this website with Hugo","uri":"/hi/Week3/"},{"categories":null,"content":"References Jain, Atishay. 2022. Hugo in Action: Static Sites and Dynamic Jamstack Apps. https://learning.oreilly.com/library/view/hugo-in-action/9781617297007/. Miller, Tom. “Setting Up a Website,”. MSDS 431: Data Engineering with Go. Course at Northwestern University, Chicago, IL, June 27, 2023. ","date":"2024-05-01","objectID":"/hi/Week3/:3:0","tags":null,"title":"Building this website with Hugo","uri":"/hi/Week3/"},{"categories":null,"content":" Image credit: R logo, Gopher ","date":"2024-05-15","objectID":"/hi/Week6/:0:0","tags":null,"title":"Concurrency with Golang","uri":"/hi/Week6/"},{"categories":null,"content":"What? Concurrency is breaking up a single process into independent components and then making a plan on how they will compute. It is based on the idea of CSP or Communicating Sequential Processes (Brookes, Hoare, and Roscoe 1984). The paradigm here is shifted towards communication and splitting of independent processes instead of sharing memory in parallel processing. To communicate between different processes, Golang utilizes goroutines, which are similar to channels as described in CSP. These are different from threads and more lightweight. ","date":"2024-05-15","objectID":"/hi/Week6/:1:0","tags":null,"title":"Concurrency with Golang","uri":"/hi/Week6/"},{"categories":null,"content":"Linear Regression See Github repository for further details. This project evaluated Go’s concurrent programming framework for training and testing linear regression models. Machine learning models will utilize the gonum library. The Go implementation tested linear regression models with varying regulization and/or concurrency using the Boston Housing Study (1970), commonly used by statisticians to predict housing prices by others (Brownlee 2020). This dataset was modified by others (Miller 1999) to remove the feature ‘B’ encoding racial segregation. All models were run 100 times and benchmarked for runtime using ’time’ before commands in the command line and the concurrency flag 0 or 1. Concurrency significantly increased speed with a runtime of 0.009s compared to 0.279s without concurrency. ","date":"2024-05-15","objectID":"/hi/Week6/:2:0","tags":null,"title":"Concurrency with Golang","uri":"/hi/Week6/"},{"categories":null,"content":"Running the demo locally Download or git clone this project onto local machine into folder on local machine. git clone https://github.com/asaraog/msds431week6.git cd msds431week6 time ./Week6 -concurrency 0 time ./Week6 -concurrency 1 ","date":"2024-05-15","objectID":"/hi/Week6/:2:1","tags":null,"title":"Concurrency with Golang","uri":"/hi/Week6/"},{"categories":null,"content":"References Brookes, S. D., C. A. R. Hoare, and A. W. Roscoe. 1984. “A Theory of Communicating Sequential Processes.” Journal of the ACM 31 (3): 560–99. https://doi.org/10.1145/828.833. Brownlee, Jason. 2020. “How to Develop Ridge Regression Models in Python.” MachineLearningMastery.Com (blog). October 8, 2020. https://machinelearningmastery.com/ridge-regression-with-python/. Miller, Thomas W. 1999. “The Boston splits: Sample size requirements for modern regression.” 1999 Proceedings of the Statistical Computing Section of the American Statistical Association, 210–215. ","date":"2024-05-15","objectID":"/hi/Week6/:3:0","tags":null,"title":"Concurrency with Golang","uri":"/hi/Week6/"},{"categories":null,"content":"A blog (a truncation of “weblog”) is an informational website published on the World Wide Web consisting of discrete, often informal diary-style text entries (posts). Posts are typically displayed in reverse chronological order so that the most recent post appears first, at the top of the web page. Until 2009, blogs were usually the work of a single individual,[citation needed] occasionally of a small group, and often covered a single subject or topic. In the 2010s, “multi-author blogs” (MABs) emerged, featuring the writing of multiple authors and sometimes professionally edited. MABs from newspapers, other media outlets, universities, think tanks, advocacy groups, and similar institutions account for an increasing quantity of blog traffic. The rise of Twitter and other “microblogging” systems helps integrate MABs and single-author blogs into the news media. Blog can also be used as a verb, meaning to maintain or add content to a blog. ","date":"2023-02-20","objectID":"/hi/first_post/:0:0","tags":null,"title":"My First Post","uri":"/hi/first_post/"}]