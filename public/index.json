[{"categories":null,"content":"Why? Golang is a compiled language designed for today’s multi-processor, scalable, high-performance systems. Known for efficient real-time data processing, Uber uses Golang on the backend. Static site generators such as Hugo were developed recently using Golang. Other platforms have inherited dependency chains that can lead to infeasible build times. For example, Cloudfare recently migrated from Gatsby. ","date":"2023-07-10","objectID":"/Week3/:1:0","tags":null,"title":"Using Golang to build a website","uri":"/Week3/"},{"categories":null,"content":"Demo I created a demo website using the Hugo Winston theme. This theme does have a Live Demo which made it simple to deploy from Github onto Netlify. All descriptions are fictional and generated using ChatGPT. ","date":"2023-07-10","objectID":"/Week3/:1:1","tags":null,"title":"Using Golang to build a website","uri":"/Week3/"},{"categories":null,"content":"Saraogee.com I had several requirements in mind for my website: Public Comments such as Valine Site Analytics such as Google Analytics Search such as Fuse.js The FixIt theme was a great starting point for my website. After some changes to the layout categories and adding support for Hindi, I deployed the website using Github Pages to my custom domain saraogee.com. ","date":"2023-07-10","objectID":"/Week3/:1:2","tags":null,"title":"Using Golang to build a website","uri":"/Week3/"},{"categories":null,"content":"Try it yourself 1. Install Hugo Please follow the official installation guide. 2. Import Hugo site locally Download or git clone this project onto local machine into folder on local machine. git clone https://github.com/asaraog/msds431week3.git cd msds431week3 cd exampleSite hugo server or git clone https://github.com/asaraog/asaraog.github.io.git cd asaraog.github.io hugo server 3. Deploy it Now enter localhost:1313 in the address bar of your browser. Files can then be changed and then committed/pushed when complete to git. Once pushed to git, the website can be deployed. ","date":"2023-07-10","objectID":"/Week3/:2:0","tags":null,"title":"Using Golang to build a website","uri":"/Week3/"},{"categories":null,"content":"References Jain, Atishay. 2022. Hugo in Action: Static Sites and Dynamic Jamstack Apps. https://learning.oreilly.com/library/view/hugo-in-action/9781617297007/. Miller, Tom. “Setting Up a Website,”. MSDS 431: Data Engineering with Go. Course at Northwestern University, Chicago, IL, June 9, 2023. ","date":"2023-07-10","objectID":"/Week3/:3:0","tags":null,"title":"Using Golang to build a website","uri":"/Week3/"},{"categories":null,"content":"A blog (a truncation of “weblog”) is an informational website published on the World Wide Web consisting of discrete, often informal diary-style text entries (posts). Posts are typically displayed in reverse chronological order so that the most recent post appears first, at the top of the web page. Until 2009, blogs were usually the work of a single individual,[citation needed] occasionally of a small group, and often covered a single subject or topic. In the 2010s, “multi-author blogs” (MABs) emerged, featuring the writing of multiple authors and sometimes professionally edited. MABs from newspapers, other media outlets, universities, think tanks, advocacy groups, and similar institutions account for an increasing quantity of blog traffic. The rise of Twitter and other “microblogging” systems helps integrate MABs and single-author blogs into the news media. Blog can also be used as a verb, meaning to maintain or add content to a blog. ","date":"2023-02-20","objectID":"/first_post3/:0:0","tags":null,"title":"My First Post3","uri":"/first_post3/"},{"categories":null,"content":"A blog (a truncation of “weblog”) is an informational website published on the World Wide Web consisting of discrete, often informal diary-style text entries (posts). Posts are typically displayed in reverse chronological order so that the most recent post appears first, at the top of the web page. Until 2009, blogs were usually the work of a single individual,[citation needed] occasionally of a small group, and often covered a single subject or topic. In the 2010s, “multi-author blogs” (MABs) emerged, featuring the writing of multiple authors and sometimes professionally edited. MABs from newspapers, other media outlets, universities, think tanks, advocacy groups, and similar institutions account for an increasing quantity of blog traffic. The rise of Twitter and other “microblogging” systems helps integrate MABs and single-author blogs into the news media. Blog can also be used as a verb, meaning to maintain or add content to a blog. ","date":"2023-02-20","objectID":"/first_post2/:0:0","tags":null,"title":"My First Post2","uri":"/first_post2/"},{"categories":null,"content":"A blog (a truncation of “weblog”) is an informational website published on the World Wide Web consisting of discrete, often informal diary-style text entries (posts). Posts are typically displayed in reverse chronological order so that the most recent post appears first, at the top of the web page. Until 2009, blogs were usually the work of a single individual,[citation needed] occasionally of a small group, and often covered a single subject or topic. In the 2010s, “multi-author blogs” (MABs) emerged, featuring the writing of multiple authors and sometimes professionally edited. MABs from newspapers, other media outlets, universities, think tanks, advocacy groups, and similar institutions account for an increasing quantity of blog traffic. The rise of Twitter and other “microblogging” systems helps integrate MABs and single-author blogs into the news media. Blog can also be used as a verb, meaning to maintain or add content to a blog. ","date":"2023-02-20","objectID":"/first_post/:0:0","tags":null,"title":"My First Post","uri":"/first_post/"},{"categories":null,"content":"Image Classification towards an OCR pipeline ","date":"0001-01-01","objectID":"/Week10/:0:0","tags":null,"title":"","uri":"/Week10/"},{"categories":null,"content":"Project Summary This project aims to build an image processing demonstraion using Go looking to implement an OCR pipeline from image capture to recognition using classification. For this demonstration, classification is performed using random forests(randomForest) employed on The Modified National Institute of Standards and Technology (MNIST) dataset using the GoMNIST driver. MNIST comprises of 60 thousand training observations and 10 thousand test observations of handwritten digits. Our use of MNIST utilized a 80/20 split in the training set for validation and all of the test observations for testing. Four different random forest models were evaluated using the validation dataset by varying the number of trees and partitioning scheme. Results are compared using an isolation forest (go-iforest) trained on all of the test observations. Misclassified images from the test set are printed for further evaluation using Go’s image package. The best-performing model utilized 1000 trees and had 96% accuracy on the hold-out test dataset and comparable accuracy for each digit. The average anomaly score was expectedly higher for the misclassified images. Like in other projects, we see that Go is extremely fast in classifying and recognizing the images. The MNIST dataset is ideal for benchmarking an OCR pipeline. Development would focus on integrating new observations into the random forest model by using the AddDataRow function. A key next step would be to integrate real-time image recognition for robotic process automation. This will be accomplished using GoCV, which leverages OpenCV, a well known computer vision library built by Intel in 1999. Other deep learning and image processing applications were considered but ultimately dropped due to various reasons outlined below: Gorgonia: Gorgonia is considered the gold standard and has support for convolutional neural networks. However, using tensors for modeling was not straightforward and the MNIST driver had a version issue. go-deep: Active repository for deep neural network. This was our initially preferred modelling method but we ran into unexpected behavior on the testset. The validation accuracy was \u003e95% but the test accuracy was ~11% indicating overfitting. More work is needed on this package. golearn: Pacakge includes various machine learning models for easy comparison. However data input requires using FixedDataGrid format or csv files. pigo: This package is a great alternative to OpenCV for image processing. However, it requires additional development to connect with a camera which is why we propose a system using GoCV instead. ","date":"0001-01-01","objectID":"/Week10/:1:0","tags":null,"title":"","uri":"/Week10/"},{"categories":null,"content":"Results Model 1 Accuracy: 94.1% Model 2 Accuracy: 94.5% Model 3 Accuracy: 95.8% Model 4 Accuracy: 96.0% Model 4 performs the best with 1000 trees and “extra”-random partitioning Test Accuracy: 95.5% Average anomaly score for correctly classified images: 0.117 Average anomaly score for incorrectly classified images: 0.118 Great accuracy on the testing dataset. Slightly higher anomaly score for incorrectly classified images Digit 0 Accuracy: 98.98% Digit 1 Accuracy: 98.77% Digit 2 Accuracy: 94.48% Digit 3 Accuracy: 94.65% Digit 4 Accuracy: 95.11% Digit 5 Accuracy: 93.61% Digit 6 Accuracy: 97.08% Digit 7 Accuracy: 94.07% Digit 8 Accuracy: 93.94% Digit 9 Accuracy: 93.76% Digits 0, 1 and 6 have higher accuracy than other digits. ","date":"0001-01-01","objectID":"/Week10/:2:0","tags":null,"title":"","uri":"/Week10/"},{"categories":null,"content":"Installation and Running Download or git clone this project onto local machine into folder on local machine. git clone https://github.com/asaraog/msds431week10.git cd msds431week10 ./Week10 cd imagesout ls Images are printed in a new directory ‘imagesout’ with the name coressponding to imageID, predicted digit, true digit and a boolean score for whether or not it is classified as anomalous. A csv file titiled (‘goScores.csv’)[./goScores.csv] is also created with information for all of the images and an additional column for the anomaly score. ","date":"0001-01-01","objectID":"/Week10/:3:0","tags":null,"title":"","uri":"/Week10/"},{"categories":null,"content":"Our Go expertise Our other projects highlight our expertise in using Go for various machine learning tasks with comparisons to Python/R: Stats in Go: Runtimes were compared for linear regression in the Anscombe Quartet with Python/R. Websites using Go: A promotional website is created for a company titled []‘AutoNotes’](https://autonotes.netlify.app/) using Hugo. Command line applications in Go: Summary statistics for the California Housing Prices study are compared with Python/Go. Scraping the web using Go: Scrapes the Web for Wikipedia pages and compare results with Python’s scrapy package. Linear Regression using Go: Runtimes were compared with and without concurrency for linear regression in the Boston Housing Study. Isolation Forests: Isolation forests are trained on the MNIST dataset and compared with R/Python on the whole dataset and by digit for correlation and runtime. Desktop Applications: A protype desktop application is created using Wails/Svelte and Vale for assisted writing. Natural Language Processing: A protype desktop application is created using Wails/Svelte for a simple lookup function from a corpus. ","date":"0001-01-01","objectID":"/Week10/:4:0","tags":null,"title":"","uri":"/Week10/"},{"categories":null,"content":"Files for this project saraogeeweek10.go: Main routine to load MNIST dataset, train random forests and compare tests with isolation forests. saraogeeweek10_test.go: does unit tests for loading dataset and prediction dimensions. goScores.csv output file of random forest classification results and anomaly scores on test dataset. Under the imagesout directory misclassified images with prediction and anomaly score. Under the data directory: Compressed image and label files for MNIST. See README.md under this directory for addition information about the original MNIST data. Week10 executable for saraogeeweek10.go on whole dataset cross-compiled Go code for Mac/Windows. ","date":"0001-01-01","objectID":"/Week10/:5:0","tags":null,"title":"","uri":"/Week10/"},{"categories":null,"content":"Evaluating Go ","date":"0001-01-01","objectID":"/Week2/:1:0","tags":null,"title":"","uri":"/Week2/"},{"categories":null,"content":"Project Summary Go will be help power our backend web and database servers and distributed service offerings on the cloud. However, data science operations remain a key concern as Python/R remain popular. This project aims to implement least squares regression of the Anscombe Quartet (1973) in Go using the stats package. The Go implementation is benchmarked for runtime with a previous implementation by Miller (2015) in Python/R as a reference. Python was significantly slower compared to R and Go implementations with runtimes of 1.36s, 0.04s, 0.173s for Python, R and Go. While R was less verbose and a bit faster than Go, Go’s testing package ensured identitcal least squares coefficients of 0.5 and 3 for each Anscombe dataset during development. The Data Science team sees test-driven development as an asset in Go and with equivalent statistical results, our concerns about switching to Go are alleviated. We strongly recommend using Go as the primary programming language accross the company. ","date":"0001-01-01","objectID":"/Week2/:1:1","tags":null,"title":"","uri":"/Week2/"},{"categories":null,"content":"Files statswithgo_saraogee.go: Main routine loads Anscombe Quartet data into Series types using LinearRegression in the stats package to output predicted values. An in-built Regress function recalculates the gradient and intercept which is rounded to 2 significant figures with a roundFloat function. statswithgo_saraogee_test.go: Benchmarking of runtime for go routine and unit test for Regress function. This testing routine ensures equivalence with Pyhon/R output coefficients of 0.5 and 3. runtimesPythonR.ipynb: Benchmarking of runtime in a Jupyter notebook. Kernel was changed between R and Python3.11.2 for each cell loading the Anscombe data and performing the regression. Week2 Unix executable file of compiled Go code for Mac/Windows. ","date":"0001-01-01","objectID":"/Week2/:1:2","tags":null,"title":"","uri":"/Week2/"},{"categories":null,"content":"References Anscombe, F. J. 1973. “Graphs in Statistical Analysis.” The American Statistician 27 (1): 17–21. https://doi.org/10.2307/2682899. Flynn, Montana. 2023. “Stats - Golang Statistics Package.” 2023. https://github.com/montanaflynn/stats. Miller, Thomas. 2015. “Modeling Techniques in Predictive Analytics Chapter 1.” 2015. https://github.com/mtpa/mtpa/tree/master/MTPA_Chapter_1. ","date":"0001-01-01","objectID":"/Week2/:1:3","tags":null,"title":"","uri":"/Week2/"},{"categories":null,"content":"Command-Line Applications and Interface ","date":"0001-01-01","objectID":"/Week4/:0:0","tags":null,"title":"","uri":"/Week4/"},{"categories":null,"content":"Project Summary Go will be help power our backend web and database servers and distributed service offerings on the cloud. However, data science operations remain a key concern as Python/R remain popular. This project aims to implement basic summary statistics of the California Housing Prices (Miller 2015) in Go using the stats package. The Go implementation is benchmarked for runtime using ’time’ before commands in the command line to compare with Python’s pandas.describe() and R’s summary functions, running each operation 100 times. The results are subsequently written to a .txt file. The filenames can be specified for the Go application on the command line thanks to the flag package. Python was significantly faster compared to R and Go implementations with ‘real’ runtimes of 2.27s, 4.10s, 5.02s for Python, R and Go respectively. While Python and R were less verbose and a bit faster than Go, Go’s testing package ensured summary statistics as Python for each of the seven variables (value, income, age, rooms, bedrooms, pop, hh) during development. The Data Science team sees test-driven development as an asset in Go and with equivalent statistical results, our concerns about switching to Go are alleviated. We strongly recommend using Go as the primary programming language accross the company. ","date":"0001-01-01","objectID":"/Week4/:1:0","tags":null,"title":"","uri":"/Week4/"},{"categories":null,"content":"Files saraogeeweek4.go: Main routine loads input .csv file and computes statistics using Describe in the stats package. This is nested into a GoDescribe function is used for testing. Statistics for each variable is written to an output .txt file. saraogeeweek4_test.go: Unit test for GoDescribe function. This testing routine ensures equivalence with Pyhon/R output coefficients of mean, maximum and minimum is rounded to 2 significant figures with a roundFloat function. Week4 Unix executable file of cross-compiled Go code for Mac/Windows. The -input and -output flag specifies the names of the input .csv and output .txt files. ","date":"0001-01-01","objectID":"/Week4/:2:0","tags":null,"title":"","uri":"/Week4/"},{"categories":null,"content":"Installation Download or git clone this project onto local machine into folder on local machine. git clone https://github.com/asaraog/msds431week4.git cd msds431week4 time ./Week4 time python3 runHouses.py time Rscript runHouses.R ./Week4 -input housesInput.csv -output housesOutputGo.txt It is benchmarked using the same command-line ’time’ before running each programming language (Go, Python and R). The Go application can be run with user-specified filenames: ./Week4 -input housesInput.csv -output housesOutputGo.txt ","date":"0001-01-01","objectID":"/Week4/:3:0","tags":null,"title":"","uri":"/Week4/"},{"categories":null,"content":"References Flynn, Montana. 2023. “Stats - Golang Statistics Package.” 2023. https://github.com/montanaflynn/stats. Miller, Thomas. 2015. “Modeling Techniques in Predictive Analytics Chapter 10.” 2015. https://github.com/mtpa/mtpa/tree/master/MTPA_Chapter_10. ","date":"0001-01-01","objectID":"/Week4/:4:0","tags":null,"title":"","uri":"/Week4/"},{"categories":null,"content":"Crawling and Scraping the Web ","date":"0001-01-01","objectID":"/Week5/:0:0","tags":null,"title":"","uri":"/Week5/"},{"categories":null,"content":"Project Summary Go will be help power our backend web and database servers and distributed service offerings on the cloud. However, data science operations remain a key concern as Python remain popular. This project aims to implement web crawling and scraping of Wikipedia (described by Chanda 2021) webpages in Go using Colly. The Go implementation is benchmarked for runtime using ’time’ before commands in the command line to compare with Python’s implementation for the same 10 webpages using scrapy. The results are subsequently written to a JSONL (items.jl) file based on previous implementations (Div Rhino 2020). Python was significantly slower compared Go implementations with ‘real’ runtimes of 15.9s and 0.6s for Python and Go respectively. While Python was less verbose than Go, Go is more scalable and has concurrency support to allow for even faster processing using Colly. The Data Science team sees test-driven development as an asset in Go and with the difference in processing time, we strongly recommend using Go as the primary programming language accross the company. ","date":"0001-01-01","objectID":"/Week5/:1:0","tags":null,"title":"","uri":"/Week5/"},{"categories":null,"content":"Files saraogeeweek5.go: Main routine loads descriptions from webpages using the Scrape function built using Colly with output as a .jl (JSONL) file with URL, Title and Text fields. It also saves a .html of the webpage in a new directory ‘wikipages’. saraogeeweek5_test.go: Unit test for Scrape function. This testing routine ensures equivalence with expected Titles and URLs from chosen websites. It uses a function by others to remove duplicates (Gosamples 2022). items.jl JSONL output file with URL, Title and Text fields for each website on a different line. Week5 Unix executable file of cross-compiled Go code for Mac/Windows. ","date":"0001-01-01","objectID":"/Week5/:2:0","tags":null,"title":"","uri":"/Week5/"},{"categories":null,"content":"Installation Download or git clone this project onto local machine into folder on local machine. git clone https://github.com/asaraog/msds431week5.git cd msds431week5 time ./Week5 cd WebFocusedCrawlWorkV001 time python3 run-articles-spider.py ","date":"0001-01-01","objectID":"/Week5/:3:0","tags":null,"title":"","uri":"/Week5/"},{"categories":null,"content":"References Chanda, Subha. 2021. “Web Scraping with Go.” ScrapingBee. 2021. https://www.scrapingbee.com/blog/web-scraping-go/. Colly Team. 2018. “Gocolly Package.” Colly. 2018. https://go-colly.org/. Div Rhino. 2020. “How to Build a Web Scraper with Go and Colly.” DivRhino. 2020. https://divrhino.com/articles/build-webscraper-with-go-and-colly/. Gosamples. 2022. “Remove Duplicates from a Slice in Go (Golang).” February 4, 2022. https://gosamples.dev/remove-duplicates-slice/. ","date":"0001-01-01","objectID":"/Week5/:4:0","tags":null,"title":"","uri":"/Week5/"},{"categories":null,"content":"Concurrency and Machine Learning ","date":"0001-01-01","objectID":"/Week6/:0:0","tags":null,"title":"","uri":"/Week6/"},{"categories":null,"content":"Project Summary This project aims to evaluate Go’s concurrent programming framework for training and testing machine learning models namely linear regression. In particular, this project uses the Boston Housing Study (1970), commonly used by statisticians to predict housing prices by others (Brownlee 2020). This dataset was modified by others (Miller 1999) to remove the feature ‘B’ encoding racial segregation. Machine learning models will utilize the gonum library. The Go implementation will test linear regression models with varying regulization and/or concurrency. The data will be split approximately 80/20 with 80% (400/506) observations used for training and 20% (106/506) of the data for testing. RMSE and R2 values are reported for each model tested with alpha=0.000001 (close to no regularization) and alpha=0.51 (optimized regularization level by Brownlee 2020). All models are benchmarked for runtime using ’time’ before commands in the command line and the concurrency flag 0 or 1. Concurrency significantly reduced runtime with runtimes of 0.016s and 0.042s with and without regularization respectively. Models are trained 100 times. The models with alpha=0.000001 performed better than with alpha = 0.51. Note that the data is resampled every time the program is run and results in differing results when run. In one run, the RMSE and R2 was 61.5, 0.625 and 51.5, 0.737 for models with and without regularization respectively showing lower RMSE and higher R2 score. ","date":"0001-01-01","objectID":"/Week6/:1:0","tags":null,"title":"","uri":"/Week6/"},{"categories":null,"content":"Files saraogeeweek6.go: Main routine loads boston.csv file and uses flag ‘-concurrency’ to select OFF (0) or ON (1) as an integer. saraogeeweek6_test.go: Unit test for regression ensuring dimensionality. It also tests if R2 values are within reasonalbe limits of 0 and 1. boston.csv Input file for Boston housing data from Miller 1999. Week6 Unix executable file of cross-compiled Go code for Mac/Windows. ","date":"0001-01-01","objectID":"/Week6/:2:0","tags":null,"title":"","uri":"/Week6/"},{"categories":null,"content":"Installation Download or git clone this project onto local machine into folder on local machine. git clone https://github.com/asaraog/msds431week6.git cd msds431week6 time ./Week6 -concurrency 0 time ./Week6 -concurrency 1 ","date":"0001-01-01","objectID":"/Week6/:3:0","tags":null,"title":"","uri":"/Week6/"},{"categories":null,"content":"References Brownlee, Jason. 2020. “How to Develop Ridge Regression Models in Python.” MachineLearningMastery.Com (blog). October 8, 2020. https://machinelearningmastery.com/ridge-regression-with-python/. Miller, Thomas W. 1999. “The Boston splits: Sample size requirements for modern regression.” 1999 Proceedings of the Statistical Computing Section of the American Statistical Association, 210–215. ","date":"0001-01-01","objectID":"/Week6/:4:0","tags":null,"title":"","uri":"/Week6/"},{"categories":null,"content":"Isolation Forests ","date":"0001-01-01","objectID":"/Week7/:0:0","tags":null,"title":"","uri":"/Week7/"},{"categories":null,"content":"Project Summary This project aims to compare Go with Python and R in training isolation forests, an unsupervised learning method to identify anomalies or outliers. It was introduced by Liu 2008 by observing that path lengths for anomalies were significantly SHORTER by averaging over many trees. He introduces an anomaly score to normalize comparisons with HIGHER scores indicating more abnormality. This project will utilize the The Modified National Institute of Standards and Technology (MNIST) dataset which comprises of 60 thousand training observations and 10 thousand test observations of handwritten digits. Our use of MNIST will be conducted on all of the 60 thousand training observations and compared across languages for Go, Risotree, Rsolitude and Python’s sklearn. An additional analysis was carried out by running independent tests for each digit (0-9) to compare Go and Python. The go-iforest package was used for the analysis in Go. Another package that already analyzed the MNIST dataset was considered though was dropped because it doesn’t let you change the hyperparameter for number of samples in a tree. Golearn/trees was also considered due to its active development but requires the use of an outdated dataframe package for input into their FixedDataGrid format. Unit tests were successful and done to ensure the correct number of dimensions and to check for filtering. Comparison code for Risotree, Rsolitude and Python was adapted from Miller 2023. Hyperparameters were kept the same across languages with 1000 trees and 256 samples for each tree. For each digit, the number of trees was changed to 100 as there are 10 times fewer parameters than in the whole dataset. All models are benchmarked for runtime using ’time’ before commands in the command line. Runtimes were significantly lower in Go with runtimes of 5.66s, 19.02s, 1m 17.00s and 1m 42.87s for Go, Risotree, Rsolitude and Python respectively. For the digit analysis, runtimes were 1.43s and 13.15s for Go and Python respectively. This is likely due to the goroutines utilized in the go-iforest package. With the difference in processing time, Go is strongly recommended for large datasets. It was easy to import the iforest package and can be easily integrated into the firms data processing pipeline. ","date":"0001-01-01","objectID":"/Week7/:1:0","tags":null,"title":"","uri":"/Week7/"},{"categories":null,"content":"Results Anomaly scores were sufficiently correlated across languages with the corresponding correlations calculated using R shown below: Correlation scores for Python/Go: 0.99 Correlation scores for Risotree/Go: 0.8 Correlation scores for Rsolitude/Go: 0.6 Correlation scores for Rsolitude/Python: 0.66 Correlation scores for Risotree/Python: 0.84 Correlation scores for Rsisotree/Rsolitude: 0.91 Rsolitude had the worst correlation with other models, as seen by Miller 2023. Correlation scores between Python and Go running independent tests for each digit with average 0.92: Correlation scores for the digit 0: 0.89 Correlation scores for the digit 1: 0.95 Correlation scores for the digit 2: 0.88 Correlation scores for the digit 3: 0.93 Correlation scores for the digit 4: 0.9 Correlation scores for the digit 5: 0.92 Correlation scores for the digit 6: 0.94 Correlation scores for the digit 7: 0.94 Correlation scores for the digit 8: 0.91 Correlation scores for the digit 9: 0.94 Correlation scores between Python and Risotree running independent tests for each digit with average 0.67 Correlation scores for the digit 0: 0.43 Correlation scores for the digit 1: 0.77 Correlation scores for the digit 2: 0.48 Correlation scores for the digit 3: 0.66 Correlation scores for the digit 4: 0.61 Correlation scores for the digit 5: 0.69 Correlation scores for the digit 6: 0.73 Correlation scores for the digit 7: 0.68 Correlation scores for the digit 8: 0.7 Correlation scores for the digit 9: 0.74 Correlation scores between Risotree and Go running independent tests for each digit with average 0.65 Correlation scores for the digit 0: 0.42 Correlation scores for the digit 1: 0.75 Correlation scores for the digit 2: 0.46 Correlation scores for the digit 3: 0.61 Correlation scores for the digit 4: 0.59 Correlation scores for the digit 5: 0.67 Correlation scores for the digit 6: 0.69 Correlation scores for the digit 7: 0.68 Correlation scores for the digit 8: 0.7 Correlation scores for the digit 9: 0.72 Interestingly, the digits 0 and 2 have low correlation indicating likely higher contamination. It is important to note that the correlation scores could be high but still indicate poor anomaly detection. This is because the hyperparameters can be manipulated (sample size, number of trees, contamination) to have normal scores for all samples. For a rigorous treatment, outlier images should be compared across languages. ","date":"0001-01-01","objectID":"/Week7/:2:0","tags":null,"title":"","uri":"/Week7/"},{"categories":null,"content":"Under the data directory Compressed image and label files for MNIST. See README.md under this directory for addition information about the original MNIST data. ","date":"0001-01-01","objectID":"/Week7/:3:0","tags":null,"title":"","uri":"/Week7/"},{"categories":null,"content":"Under the go directory saraogeeweek7.go: loads MNIST training data and trains isolation forest on the whole dataset and calculates anomaly scores for each sample. saraogeeweek7_test.go: does unit tests for saraogeeweek7digit.go loads MNIST training data and trains isolation forest for each digit and calculates anomaly scores for each sample. saraogeeweek7digit_test.go does unit tests for Week7 executable for saraogeeweek7.go on whole dataset cross-compiled Go code for Mac/Windows. Week7digit executable for saraogeeweek7digit.go for each digit cross-compiled Go code for Mac/Windows. ","date":"0001-01-01","objectID":"/Week7/:4:0","tags":null,"title":"","uri":"/Week7/"},{"categories":null,"content":"Under the python directory getMNIST.py uses the Python packages gzip to read the original MNIST training data. isolationForest.py uses the SciKit Learn isolation forest package to obtain anomaly scores for the 60 thousand training images. isolationForestdigit.py uses the SciKit Learn isolation forest package to obtain anomaly scores for each digit subset for the 60 thousand training images. ","date":"0001-01-01","objectID":"/Week7/:5:0","tags":null,"title":"","uri":"/Week7/"},{"categories":null,"content":"Under the r directory getMNIST.R uses the R package idx2r to read the original MNIST training data. isolationForest.R uses the R package Solitude to obtain anomaly scores for the 60 thousand training images. isotreeForest.R uses the R package isotree to obtain anomaly scores for the 60 thousand training images. ","date":"0001-01-01","objectID":"/Week7/:6:0","tags":null,"title":"","uri":"/Week7/"},{"categories":null,"content":"Under the results directory labels.csv shows the digits associated with the images. Not used in isolation forests. May be useful in subsequent analyses showing which of the digits are more likely to have outliers/anomalies. pythonScores.csv comma-delimited file of Python anomaly scores. solitudeRScores.csv comma-delimited file of R solitude anomaly scores. isotreeRScores.csv comma-delimited file of R isotree anomaly scores. go_data.csv comma-delimited file of Go anomaly scores. analyzeResults.R is an R program that analyzes the results from the Python, Go and R isolation forests. We examine R results from both the solitude and isotree packages. Base R graphics are used to summarize results in portable document format (pdf) figure files. ","date":"0001-01-01","objectID":"/Week7/:7:0","tags":null,"title":"","uri":"/Week7/"},{"categories":null,"content":"Under the results/digitanalysis directory pythonScores_i.csv comma-delimited file of Python anomaly scores for each digit i. go_data_i.csv comma-delimited file of Go anomaly scores for each digit i. analyzedigitResults.R is an R program that analyzes the results from the Python and Go isolation forests trained on each digit by itself. ","date":"0001-01-01","objectID":"/Week7/:8:0","tags":null,"title":"","uri":"/Week7/"},{"categories":null,"content":"Installation Download or git clone this project onto local machine into folder on local machine. git clone https://github.com/asaraog/msds431week7.git cd msds431week7/go/whole time ./Week7 cd ../digit time ./Week7digit cd ../../python time python3 isolationForest.py time python3 isolationForestdigit.py cd ../r time Rscript isotreeForest.R time Rscript solitudeForest.R cd ../results Rscript analyzeResults.R cd digitanalysis Rscript analyzedigitResults.R ","date":"0001-01-01","objectID":"/Week7/:9:0","tags":null,"title":"","uri":"/Week7/"},{"categories":null,"content":"References Liu, Fei Tony, Kai Ming Ting, and Zhi-Hua Zhou. 2008. “Isolation Forest.”. In ICDM ‘08: Proceedings of the 2008 Eighth IEEE International Conference on Data Mining, December 2008, 413–422. ","date":"0001-01-01","objectID":"/Week7/:10:0","tags":null,"title":"","uri":"/Week7/"},{"categories":null,"content":"Assisted Writing Application ","date":"0001-01-01","objectID":"/Week8/:0:0","tags":null,"title":"","uri":"/Week8/"},{"categories":null,"content":"Project Summary This project aims to produce a prototype for an assisted writing application based on Vale, an exisiting command line interface with a backend in Go. The prototype is developed using Wails and Svelte. It aims to accept plain text files (.txt or .md) as user input and a preference for style as a text input. Two style preferences are supported in the application with a focus on the word ‘data’ as either a singular or plural noun. It only captures simple cases for the verbs ‘is/are’, ‘was/were’, ‘show/shows’, ‘suggest/suggests’, ‘indicate/indicates’. However, more complex NLP tools for parts of speech tagging can be included from Python such as spaCy with Vale. The output is displayed in the application with support for errors such as invalid user preference, invalid type of text file or insufficient length of text. The application prototype is succesful during development (wails dev) in linking Vale CLI output with user input and displaying errors when for example an image file is read in or incorrect preference is registered like 3 or 4. Although Vale is not able to integrate with Wails during build (wails build) and does not output correctly in the built application, style preferences are captured with correct warnings using the testing text file when using the Vale CLI directly. Future implemntations would explore other prose linters that do not require command line dependencies. ","date":"0001-01-01","objectID":"/Week8/:1:0","tags":null,"title":"","uri":"/Week8/"},{"categories":null,"content":"Important files app.go: Backend ‘brain’ of application. Lint function takes in user preference and a user-specified text file to output a processed string of the Vale CLI output. ProcessRaw takes the Vale CLI output and processes it for the application frontend. A test unit function is written in app_test.go. frontend/src/App.Svelte: Frontend specifications. Binding of user input for preference to backend code. Displays output of Vale CLI in the application after clicking button. ./build/bin/Week8.app Executable application for MacOS. .vale.ini, styles/singular/singular.yml: Configuration for singular noun preference and tokens specified _vale.ini, styles/plural/plural.yml: Configuration for plural noun preference and tokens specified test.txt: Test file including both ‘Data are here’ and ‘Data is here’ with an error produced depending on user preference. There is some prose generated using ChatGPT with the prompt ‘cats 200 words’. ","date":"0001-01-01","objectID":"/Week8/:2:0","tags":null,"title":"","uri":"/Week8/"},{"categories":null,"content":"Installation and Running First install Vale and Wails onto your machine. Note to substitute brew with your package installer to get Vale. xcode-select --install go install github.com/wailsapp/wails/v2/cmd/wails@latest brew install vale Download or git clone this project onto your local machine and test using vale CLI before running the development application: git clone https://github.com/asaraog/msds431week8.git cd msds431week8 vale sync vale test.txt --config=.vale.ini vale test.txt --config=_vale.ini wails dev Input 1 or 2 to indicate singular or plural respectively. Try entering 3 to generate the appropriate error message. If correctly input, clicking the ‘Lint it’ button will prompt a file dialog to open. Select the appropriate text file (test.txt). Output should be identical to using the CLI. Check with build version by running the application directly: cd ./build/bin/ open Week8.app ","date":"0001-01-01","objectID":"/Week8/:3:0","tags":null,"title":"","uri":"/Week8/"},{"categories":null,"content":"Chatbot Prototype Application ","date":"0001-01-01","objectID":"/Week9/:0:0","tags":null,"title":"","uri":"/Week9/"},{"categories":null,"content":"Project Summary This project aims to produce a prototype for a desktop chatbot application based on Wails and Svelte. It aims to accept plain text input and output answers from a knowledge base represented with Go’s SQL driver. For this prototype, only one word inputs will be allowed and a simple corpus of possible question/answer pairs will be used. The prototype is capable of integrating NLP concepts such as term frequency-inverse document frequency (TF-IDF). It also includes support for errors such as too many words, no input and no matches. The application prototype is succesful during development and build in providing the correct answers to user input questions. Go should suffice for most software components (database, frontend, backend) and can be used for language processing as well with wego package for word embeddings and spago for neural networks and LLMs like huggingface. The SQL version of the database is a great start but using a hosted database of vector objects like Milvus is recommended for the final project as it would be easier to integrate with OpenAI’s embedding representations. ","date":"0001-01-01","objectID":"/Week9/:1:0","tags":null,"title":"","uri":"/Week9/"},{"categories":null,"content":"Further development as an AI application Further development of the application would first continue in SQL by adding a TF-IDF representation to calculate similarity scores. We can then add ‘fuzzy matching’ and tokenization/lemmatization of the corpus and query. This will have the simplest development process with no dependency required. The single word query is highly amenable to using word2vec. The next step would be to add embeddings from OpenAI which will require an external dependence. We would then add LLM support using huggingface. This might be complicated with Wails based on previous experience. ","date":"0001-01-01","objectID":"/Week9/:2:0","tags":null,"title":"","uri":"/Week9/"},{"categories":null,"content":"Important files app.go: Backend ‘brain’ of application. Lookup function creates an SQL database for query. A test unit function is written in app_test.go. frontend/src/App.Svelte: Frontend specifications. Binding of user input for preference to backend code. Displays output of Lookup. ./build/bin/Week9.app Executable application for MacOS. QandA.csv: Corpus of questions/answers from others. ","date":"0001-01-01","objectID":"/Week9/:3:0","tags":null,"title":"","uri":"/Week9/"},{"categories":null,"content":"Installation and Running First install Wails onto your machine. xcode-select --install go install github.com/wailsapp/wails/v2/cmd/wails@latest Download or git clone this project onto your local machine and test using vale CLI before running the development application: git clone https://github.com/asaraog/msds431week9.git cd msds431week9/build/bin open Week9.app Before clicking ‘Query’, input nothing, ‘break’, ’test’ and ‘break test’ in the text box to check for correct application behavior. ","date":"0001-01-01","objectID":"/Week9/:4:0","tags":null,"title":"","uri":"/Week9/"}]