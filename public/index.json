[{"categories":null,"content":" Image credit: R logo, Gopher ","date":"2024-05-08","objectID":"/PythonRGo/:0:0","tags":null,"title":"Comparing Golang with Python/R","uri":"/PythonRGo/"},{"categories":null,"content":"Evaluating Golang Unlike Python/R, Golang is a compiled language that is more verbose but is said to run faster. For example, Uber, Amex and KhanAcademy find benefits with Golang. To benchmark Golang’s performance and runtime against Python and/or R, here are various cases: Performing least squares regression of the Anscombe Quartet (1973) Computing summary statistics of the California Housing Prices (Miller 2015) Web crawling and scraping of Wikipedia Identifying anomalies in the MNIST dataset ","date":"2024-05-08","objectID":"/PythonRGo/:1:0","tags":null,"title":"Comparing Golang with Python/R","uri":"/PythonRGo/"},{"categories":null,"content":"Least squares regression with Python and R The Golang implementation is benchmarked for runtime with a previous implementation by Miller (2015) in Python/R as a reference. Least squares regression is implemented in Golang using the stats package. Python was significantly slower compared to R and Go implementations with runtimes of 1.36s, 0.04s, 0.173s for Python, R and Go. While R was less verbose and a bit faster than Go, Go’s testing package ensured identitcal least squares coefficients of 0.5 and 3 for each Anscombe dataset during development. See my Github repository for further details. ","date":"2024-05-08","objectID":"/PythonRGo/:1:1","tags":null,"title":"Comparing Golang with Python/R","uri":"/PythonRGo/"},{"categories":null,"content":"Summary statistics with Python and R The Golang implementation is done using the stats package. Runtimes are compared using ’time’ before commands in the command line to compare with Python’s pandas.describe() and R’s summary functions. The operations are run 100 times for each implementation. Python was significantly faster compared to R and Go implementations with ‘real’ runtimes of 2.27s, 4.10s, 5.02s for Python, R and Go respectively. While Python and R were less verbose and a bit faster than Go, Go’s testing package ensured similar summary statistics as Python for each of the seven variables (value, income, age, rooms, bedrooms, pop, hh) during development. To run locally, download or git clone this project: git clone https://github.com/asaraog/msds431week4.git cd msds431week4 time ./Week4 time python3 runHouses.py time Rscript runHouses.R See my Github repository for further details. ","date":"2024-05-08","objectID":"/PythonRGo/:1:2","tags":null,"title":"Comparing Golang with Python/R","uri":"/PythonRGo/"},{"categories":null,"content":"Web crawling and scraping with Python This project implemented web crawling and scraping of Wikipedia (described by Chanda 2021) webpages in Golang using Colly. The Go implementation is benchmarked for runtime using ’time’ before commands in the command line to compare with Python’s implementation for the same 10 webpages using scrapy. Python was significantly slower compared Go implementations with ‘real’ runtimes of 15.9s and 0.6s for Python and Go respectively. While Python was less verbose than Go, Go is more scalable and has concurrency support to allow for even faster processing using Colly. To run locally, download or git clone this project: git clone https://github.com/asaraog/msds431week5.git cd msds431week5 time ./Week5 cd WebFocusedCrawlWorkV001 time python3 run-articles-spider.py See my Github repository for further details. ","date":"2024-05-08","objectID":"/PythonRGo/:1:3","tags":null,"title":"Comparing Golang with Python/R","uri":"/PythonRGo/"},{"categories":null,"content":"Identifying anomalies using isolation forests with Python and R Isolation forests are used as an unsupervised learning method to identify anomalies or outliers. It was introduced by Liu 2008 by observing that path lengths for anomalies were significantly SHORTER by averaging over many trees. He introduces an anomaly score to normalize comparisons with HIGHER scores indicating more abnormality. Hyperparameters were kept the same across languages with 1000 trees and 256 samples. The go-iforest package was used for the analysis in Go. Comparison code for R and Python was adapted from Miller 2023. Runtimes were significantly lower in Golang with runtimes of 5.66s, 19.02s, and 1m 42.87s for Golang, R and Python respectively. This is likely due to the goroutines utilized in the go-iforest package. To run locally, download or git clone this project: git clone https://github.com/asaraog/msds431week7.git cd msds431week7/go/whole time ./Week7 cd ../../python time python3 isolationForest.py cd ../r time Rscript isotreeForest.R See my Github repository for further details. ","date":"2024-05-08","objectID":"/PythonRGo/:1:4","tags":null,"title":"Comparing Golang with Python/R","uri":"/PythonRGo/"},{"categories":null,"content":"Conclusion Programs written using Golang had similar performances to Python/R in basic statistical learning applications such as least squares regression and summary statistics. Efficient results were obtained utilizing test-driven development. In applications with more scalability, Golang performed very well. For both web scraping/crawling and identifying anomalies, Golang performs more than 10 times faster than Python. This could be attributed to Golang’s concurrency support with goroutines. ","date":"2024-05-08","objectID":"/PythonRGo/:2:0","tags":null,"title":"Comparing Golang with Python/R","uri":"/PythonRGo/"},{"categories":null,"content":"References Anscombe, F. J. 1973. “Graphs in Statistical Analysis.” The American Statistician 27 (1): 17–21. https://doi.org/10.2307/2682899. Chanda, Subha. 2021. “Web Scraping with Go.” ScrapingBee. 2021. https://www.scrapingbee.com/blog/web-scraping-go/. Liu, Fei Tony, Kai Ming Ting, and Zhi-Hua Zhou. 2008. “Isolation Forest.”. In ICDM ‘08: Proceedings of the 2008 Eighth IEEE International Conference on Data Mining, December 2008, 413–422. Miller, Tom. “Testing Go for Statistics,”. MSDS 431: Data Engineering with Go. Course at Northwestern University, Chicago, IL, June 19, 2023. Miller, Tom. “Data Cleaning, Frames and Pipelines,”. MSDS 431: Data Engineering with Go. Course at Northwestern University, Chicago, IL, June 19, 2023. https://github.com/ThomasWMiller/jump-start-mnist-iforest Miller, Tom. “Command-Line Applications,”. MSDS 431: Data Engineering with Go. Course at Northwestern University, Chicago, IL, July 1, 2023. Miller, Tom. “Crawling and Scraping the Web,”. MSDS 431: Data Engineering with Go. Course at Northwestern University, Chicago, IL, July 2, 2023. ","date":"2024-05-08","objectID":"/PythonRGo/:3:0","tags":null,"title":"Comparing Golang with Python/R","uri":"/PythonRGo/"},{"categories":null,"content":" Partial image credit ","date":"2024-05-01","objectID":"/Website/:0:0","tags":null,"title":"Building this website with Hugo","uri":"/Website/"},{"categories":null,"content":"Why Golang? Static site generators such as Hugo were developed recently using Golang. Golang is a compiled language designed for today’s multi-processor, scalable, high-performance systems. Other platforms have inherited dependency chains that can lead to infeasible build times. Realizing these benefits, Cloudfare recently migrated from Gatsby (a web framework based on JavaScript). ","date":"2024-05-01","objectID":"/Website/:1:0","tags":null,"title":"Building this website with Hugo","uri":"/Website/"},{"categories":null,"content":"Demo website I first created a demo website using the Hugo Winston theme. This theme does have a Live Demo which made it simple to deploy onto Netlify. All descriptions are fictional and generated using ChatGPT. See my Github repository for further details. ","date":"2024-05-01","objectID":"/Website/:1:1","tags":null,"title":"Building this website with Hugo","uri":"/Website/"},{"categories":null,"content":"Saraogee.com I had several requirements in mind for my website: Public Comments such as Valine Site Analytics such as Google Analytics Search such as Fuse.js The FixIt theme was a great starting point for my website. I made some changes to the categories in the layout and added support for Hindi. The website continuously deploys from updates I make in the file directory via my Github repository using Github Pages. ","date":"2024-05-01","objectID":"/Website/:1:2","tags":null,"title":"Building this website with Hugo","uri":"/Website/"},{"categories":null,"content":"Build it locally 1. Install Hugo Please follow the official installation guide. 2. Import Hugo site locally Download or git clone this project onto local machine into folder on local machine. git clone https://github.com/asaraog/msds431week3.git cd msds431week3 cd exampleSite hugo server or git clone https://github.com/asaraog/asaraog.github.io.git cd asaraog.github.io hugo server 3. Deploy it Now enter localhost:1313 in the address bar of your browser. Files can then be changed and then committed/pushed when complete to git. Once pushed to git, the website can be deployed. ","date":"2024-05-01","objectID":"/Website/:2:0","tags":null,"title":"Building this website with Hugo","uri":"/Website/"},{"categories":null,"content":"References Jain, Atishay. 2022. Hugo in Action: Static Sites and Dynamic Jamstack Apps. https://learning.oreilly.com/library/view/hugo-in-action/9781617297007/. Miller, Tom. “Setting Up a Website,”. MSDS 431: Data Engineering with Go. Course at Northwestern University, Chicago, IL, June 27, 2023. ","date":"2024-05-01","objectID":"/Website/:3:0","tags":null,"title":"Building this website with Hugo","uri":"/Website/"},{"categories":null,"content":"What? Concurrency or concurrent processing is breaking up a single process into independent components to coordinate compute. It is based on the idea of CSP or Communicating Sequential Processes (Brookes, Hoare, and Roscoe 1984). In contrast to parallel processing, the paradigm here is shifted towards communication and splitting of independent processes instead of sharing memory. To communicate between different processes, Golang utilizes goroutines, which are similar to channels as described in CSP. Goroutines are lightweight and different from threads in parallel processing. ","date":"2024-05-15","objectID":"/Goroutines/:1:0","tags":null,"title":"Concurrency with Golang","uri":"/Goroutines/"},{"categories":null,"content":"Linear Regression This project evaluated Go’s concurrent programming framework for training and testing linear regression models. Machine learning models will utilize the gonum library. The Go implementation tested linear regression models with varying regulization and/or concurrency using the Boston Housing Study (1970), commonly used by statisticians to predict housing prices by others (Brownlee 2020). This dataset was modified by others (Miller 1999) to remove the feature ‘B’ encoding racial segregation. All models were run 100 times and benchmarked for runtime using ’time’ before commands in the command line and the concurrency flag 0 or 1. Concurrency significantly increased speed with a runtime of 0.009s compared to 0.279s without concurrency. See my Github repository for further details. ","date":"2024-05-15","objectID":"/Goroutines/:2:0","tags":null,"title":"Concurrency with Golang","uri":"/Goroutines/"},{"categories":null,"content":"Running the demo locally Download or git clone this project onto local machine into folder on local machine. git clone https://github.com/asaraog/msds431week6.git cd msds431week6 time ./Week6 -concurrency 0 time ./Week6 -concurrency 1 ","date":"2024-05-15","objectID":"/Goroutines/:2:1","tags":null,"title":"Concurrency with Golang","uri":"/Goroutines/"},{"categories":null,"content":"References Brookes, S. D., C. A. R. Hoare, and A. W. Roscoe. 1984. “A Theory of Communicating Sequential Processes.” Journal of the ACM 31 (3): 560–99. https://doi.org/10.1145/828.833. Brownlee, Jason. 2020. “How to Develop Ridge Regression Models in Python.” MachineLearningMastery.Com (blog). October 8, 2020. https://machinelearningmastery.com/ridge-regression-with-python/. Miller, Tom. “Exploring Concurrency,”. MSDS 431: Data Engineering with Go. Course at Northwestern University, Chicago, IL, June 19, 2023. Miller, Thomas W. 1999. “The Boston splits: Sample size requirements for modern regression.” 1999 Proceedings of the Statistical Computing Section of the American Statistical Association, 210–215. ","date":"2024-05-15","objectID":"/Goroutines/:3:0","tags":null,"title":"Concurrency with Golang","uri":"/Goroutines/"},{"categories":null,"content":"What? In the world of web and desktop applications, frameworks for different software languages such as Rails for Ruby and Electron for JavaScript are popular. Analogous to Rails, Golang uses the Wails framework and offers the benefits of Golang’s reported processing speed. Wails also uses the native rendering engine unlike Electron which uses an embedded browser. Furthermore, Wails integrates user interface (UI) frameworks such as React, Vue and Svelte. To demo Golang’s frontend capabilities, two projects are implemented here using Wails and Svelte: Assisted Writing Application Chatbot ","date":"2024-05-15","objectID":"/Front-end_Applications/:1:0","tags":null,"title":"Front-end software development using Golang","uri":"/Front-end_Applications/"},{"categories":null,"content":"Assisted Writing Application This project produces a prototype for an assisted writing application based on Vale (an exisiting command line interface written in Golang). It accepts plain text files (.txt or .md) as user input and a style preference as a text input. The output is displayed in the application with support for errors such as invalid user preference, invalid type of text file or insufficient length of text.The application prototype is succesful during development (wails dev) in linking Vale CLI output with user input and displaying errors. However, Wails is unable to integrate with command line applications during build (wails build) for this application. Future implemntations would explore other prose linters that do not require command line dependencies. To run the prototype locally, first install Wails onto your machine and then download this project: xcode-select --install go install github.com/wailsapp/wails/v2/cmd/wails@latest git clone https://github.com/asaraog/msds431week8.git cd msds431week8 wails dev To test for correct application behavior, input 1 or 2 to indicate a style preference and click ‘Lint it’ to upload ’test.txt’. Try entering 3 to generate the appropriate error message. See my Github repository for further details. ","date":"2024-05-15","objectID":"/Front-end_Applications/:2:0","tags":null,"title":"Front-end software development using Golang","uri":"/Front-end_Applications/"},{"categories":null,"content":"Chatbot This project produces a prototype for a desktop chatbot application. It accepts a single word query as a plain text input and output answers from a knowledge base(by others) represented with Go’s SQL driver. The prototype is capable of integrating NLP concepts such as term frequency-inverse document frequency (TF-IDF). It also includes support for errors such as too many words, no input and no matches. The application prototype is succesful during development AND build in providing the correct answers to user input questions. Further development of the application would first continue in SQL by adding a TF-IDF representation to calculate similarity scores. We can then add ‘fuzzy matching’ and tokenization/lemmatization of the corpus and query. This will have the simplest development process with no dependency required. The single word query is highly amenable to using word2vec. To run the application locally, download or git clone this project: git clone https://github.com/asaraog/msds431week9.git cd msds431week9/build/bin open Week9.app To test for correct chatbot application behavior first type nothing into the text box and then ‘break’, ’test’ and ‘break test’ before clicking ‘Query’ See my Github repository for further details. ","date":"2024-05-15","objectID":"/Front-end_Applications/:3:0","tags":null,"title":"Front-end software development using Golang","uri":"/Front-end_Applications/"},{"categories":null,"content":"References Miller, Tom. “Desktop Applications,”. MSDS 431: Data Engineering with Go. Course at Northwestern University, Chicago, IL, June 19, 2023. Miller, Tom. “Natural Language Processing,”. MSDS 431: Data Engineering with Go. Course at Northwestern University, Chicago, IL, June 19, 2023. https://github.com/ThomasWMiller/jump-start-sqlite ","date":"2024-05-15","objectID":"/Front-end_Applications/:4:0","tags":null,"title":"Front-end software development using Golang","uri":"/Front-end_Applications/"},{"categories":null,"content":"MNIST Dataset This project utilizes the The Modified National Institute of Standards and Technology (MNIST) dataset which comprises of 60 thousand training observations and 10 thousand test observations of handwritten digits. ","date":"2024-05-15","objectID":"/MNIST/:1:0","tags":null,"title":"MNIST Dataset","uri":"/MNIST/"},{"categories":null,"content":"Image classification using neural networks with Python Due to the complexity of imaging data, connectionist network models or neural networks have been gaining significant interest in recent years. Python machine learning packages sklearn and keras have been especially useful for specifying neural network architectures. This project aims to understand how connectionist models improve testing accuracy by varying the number of nodes in the hidden ’layer’ between one (actually not connectionist), two and 128 nodes. Expectedly, neural network models with 128 nodes in the hidden layer performed the best with 97% testing accuracy compared to 31%, 67% for the single node and double node models respectively. Understand the improvement in accuracy with these plots of the class distributions of the activation values in the hidden layer. For a single node in the hidden layer (equivalent to logistic regression), we see some overlap: Increasing the number of nodes in the hidden layer by one, we see better seperation between the classes in the model: See my report for further details. Also, see each experiment for each of the models (single node , double node , many nodes ), preprocessing inputs using principal component analysis (PCA) or ranked inputs from a random forest analysis. ","date":"2024-05-15","objectID":"/MNIST/:2:0","tags":null,"title":"MNIST Dataset","uri":"/MNIST/"},{"categories":null,"content":"Image classification using random forests with Golang This project creates a demo towards implementing a data engineering pipeline from image capture to recognition for an integrated application using purely Golang. For this demonstration, image classification is performed using Golang’s randomForest package employed on MNIST dataset using the GoMNIST driver. Results are compared using an isolation forest (go-iforest) trained on all of the test observations. For information about isolation forests, see an earlier post comparing Golang with Python/R under “Identifying anomalies in MNIST”. The best-performing model utilized 1000 trees and had 96% accuracy on the hold-out test dataset with comparable accuracy for each digit. The average anomaly score was expectedly higher for the misclassified images. Misclassified images from the test set are printed using Go’s image package. To run locally, download or git clone this project: git clone https://github.com/asaraog/msds431week10.git cd msds431week10 ./Week10 cd imagesout ls Images are printed in a new directory ‘imagesout’ with the name coressponding to imageID, predicted digit, true digit and a boolean score for whether or not it is classified as anomalous. A csv file titled ‘goScores.csv’ is also created with information for all of the images and an additional column for the anomaly score. See my Github repository for further details. ","date":"2024-05-15","objectID":"/MNIST/:3:0","tags":null,"title":"MNIST Dataset","uri":"/MNIST/"},{"categories":null,"content":"References Sambamoorthi, Nethra. “Computer Vision,”. MSDS 458: Artificial Intelligence and Deep Learning. Course at Northwestern University, Chicago, IL, October 9, 2022. https://github.com/aimlfacnwu/MSDS_458_Fall2022/tree/master/MSDS458_Assignment_01 Miller, Tom. “Data Cleaning, Frames and Pipelines,”. MSDS 431: Data Engineering with Go. Course at Northwestern University, Chicago, IL, June 19, 2023. ","date":"2024-05-15","objectID":"/MNIST/:4:0","tags":null,"title":"MNIST Dataset","uri":"/MNIST/"}]