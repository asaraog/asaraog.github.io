[{"categories":null,"content":" Partial image credit ","date":"2024-06-17","objectID":"/Website/:0:0","tags":null,"title":"Building this website in Hugo","uri":"/Website/"},{"categories":null,"content":"Why Golang? Static site generators such as Hugo were developed recently using Golang. Golang is a compiled language designed for today’s multi-processor, scalable, high-performance systems. Other platforms have inherited dependency chains that can lead to infeasible build times. Realizing these benefits, Cloudfare recently migrated from Gatsby (a web framework based on JavaScript). ","date":"2024-06-17","objectID":"/Website/:1:0","tags":null,"title":"Building this website in Hugo","uri":"/Website/"},{"categories":null,"content":"Demo website I first created a demo website using the Hugo Winston theme. This theme does have a Live Demo which made it simple to deploy onto Netlify. All descriptions are fictional and generated using ChatGPT. See my Github repository for further details. ","date":"2024-06-17","objectID":"/Website/:1:1","tags":null,"title":"Building this website in Hugo","uri":"/Website/"},{"categories":null,"content":"Saraogee.com I had several requirements in mind for my website: Public Comments such as Valine Site Analytics such as Google Analytics Search such as Fuse.js The FixIt theme was a great starting point for my website. I made some changes to the categories in the layout and added support for Hindi. The website continuously deploys from updates I make in the file directory via my Github repository using Github Pages. ","date":"2024-06-17","objectID":"/Website/:1:2","tags":null,"title":"Building this website in Hugo","uri":"/Website/"},{"categories":null,"content":"Build it locally 1. Install Hugo Please follow the official installation guide. 2. Import Hugo site locally Download or git clone this project onto local machine into folder on local machine. git clone https://github.com/asaraog/msds431week3.git cd msds431week3 cd exampleSite hugo server or git clone https://github.com/asaraog/asaraog.github.io.git cd asaraog.github.io hugo server 3. Deploy it Now enter localhost:1313 in the address bar of your browser. Files can then be changed and then committed/pushed when complete to git. Once pushed to git, the website can be deployed. ","date":"2024-06-17","objectID":"/Website/:2:0","tags":null,"title":"Building this website in Hugo","uri":"/Website/"},{"categories":null,"content":"References Jain, Atishay. 2022. Hugo in Action: Static Sites and Dynamic Jamstack Apps. https://learning.oreilly.com/library/view/hugo-in-action/9781617297007/. Miller, Tom. “Setting Up a Website,”. MSDS 431: Data Engineering with Go. Course at Northwestern University, Chicago, IL, June 27, 2023. ","date":"2024-06-17","objectID":"/Website/:3:0","tags":null,"title":"Building this website in Hugo","uri":"/Website/"},{"categories":null,"content":" Image credit: R logo, Gopher ","date":"2023-08-06","objectID":"/PythonRGo/:0:0","tags":null,"title":"Comparing Golang to Python/R","uri":"/PythonRGo/"},{"categories":null,"content":"Evaluating Golang Unlike Python/R, Golang is a compiled language that is more verbose but is said to run faster. For example, Uber, Amex and KhanAcademy find benefits with Golang. To benchmark Golang’s performance and runtime against Python and/or R, here are various cases: Performing least squares regression of the Anscombe Quartet (1973) Computing summary statistics of the California Housing Prices (Miller 2015) Web crawling and scraping of Wikipedia Identifying anomalies in the MNIST dataset ","date":"2023-08-06","objectID":"/PythonRGo/:1:0","tags":null,"title":"Comparing Golang to Python/R","uri":"/PythonRGo/"},{"categories":null,"content":"Least squares regression with Python and R The Golang implementation is benchmarked for runtime with a previous implementation by Miller (2015) in Python/R as a reference. Least squares regression is implemented in Golang using the stats package. Python was significantly slower compared to R and Go implementations with runtimes of 1.36s, 0.04s, 0.173s for Python, R and Go. While R was less verbose and a bit faster than Go, Go’s testing package ensured identitcal least squares coefficients of 0.5 and 3 for each Anscombe dataset during development. See my Github repository for further details. ","date":"2023-08-06","objectID":"/PythonRGo/:1:1","tags":null,"title":"Comparing Golang to Python/R","uri":"/PythonRGo/"},{"categories":null,"content":"Summary statistics with Python and R The Golang implementation is done using the stats package. Runtimes are compared using ’time’ before commands in the command line to compare with Python’s pandas.describe() and R’s summary functions. The operations are run 100 times for each implementation. Python was significantly faster compared to R and Go implementations with ‘real’ runtimes of 2.27s, 4.10s, 5.02s for Python, R and Go respectively. While Python and R were less verbose and a bit faster than Go, Go’s testing package ensured similar summary statistics as Python for each of the seven variables (value, income, age, rooms, bedrooms, pop, hh) during development. To run locally, download or git clone this project: git clone https://github.com/asaraog/msds431week4.git cd msds431week4 time ./Week4 time python3 runHouses.py time Rscript runHouses.R See my Github repository for further details. ","date":"2023-08-06","objectID":"/PythonRGo/:1:2","tags":null,"title":"Comparing Golang to Python/R","uri":"/PythonRGo/"},{"categories":null,"content":"Web crawling and scraping with Python This project implemented web crawling and scraping of Wikipedia (described by Chanda 2021) webpages in Golang using Colly. The Go implementation is benchmarked for runtime using ’time’ before commands in the command line to compare with Python’s implementation for the same 10 webpages using scrapy. Python was significantly slower compared Go implementations with ‘real’ runtimes of 15.9s and 0.6s for Python and Go respectively. While Python was less verbose than Go, Go is more scalable and has concurrency support to allow for even faster processing using Colly. To run locally, download or git clone this project: git clone https://github.com/asaraog/msds431week5.git cd msds431week5 time ./Week5 cd WebFocusedCrawlWorkV001 time python3 run-articles-spider.py See my Github repository for further details. ","date":"2023-08-06","objectID":"/PythonRGo/:1:3","tags":null,"title":"Comparing Golang to Python/R","uri":"/PythonRGo/"},{"categories":null,"content":"Identifying anomalies using isolation forests with Python and R Isolation forests are used as an unsupervised learning method to identify anomalies or outliers. It was introduced by Liu 2008 by observing that path lengths for anomalies were significantly SHORTER by averaging over many trees. He introduces an anomaly score to normalize comparisons with HIGHER scores indicating more abnormality. Hyperparameters were kept the same across languages with 1000 trees and 256 samples. The go-iforest package was used for the analysis in Go. Comparison code for R and Python was adapted from Miller 2023. Runtimes were significantly lower in Golang with runtimes of 5.66s, 19.02s, and 1m 42.87s for Golang, R and Python respectively. This is likely due to the goroutines utilized in the go-iforest package. To run locally, download or git clone this project: git clone https://github.com/asaraog/msds431week7.git cd msds431week7/go/whole time ./Week7 cd ../../python time python3 isolationForest.py cd ../r time Rscript isotreeForest.R See my Github repository for further details. ","date":"2023-08-06","objectID":"/PythonRGo/:1:4","tags":null,"title":"Comparing Golang to Python/R","uri":"/PythonRGo/"},{"categories":null,"content":"Conclusion Programs written using Golang had similar performances to Python/R in basic statistical learning applications such as least squares regression and summary statistics. Efficient results were obtained utilizing test-driven development. In applications with more scalability, Golang performed very well. For both web scraping/crawling and identifying anomalies, Golang performs more than 10 times faster than Python. This could be attributed to Golang’s concurrency support with goroutines. ","date":"2023-08-06","objectID":"/PythonRGo/:2:0","tags":null,"title":"Comparing Golang to Python/R","uri":"/PythonRGo/"},{"categories":null,"content":"References Anscombe, F. J. 1973. “Graphs in Statistical Analysis.” The American Statistician 27 (1): 17–21. https://doi.org/10.2307/2682899. Chanda, Subha. 2021. “Web Scraping with Go.” ScrapingBee. 2021. https://www.scrapingbee.com/blog/web-scraping-go/. Liu, Fei Tony, Kai Ming Ting, and Zhi-Hua Zhou. 2008. “Isolation Forest.”. In ICDM ‘08: Proceedings of the 2008 Eighth IEEE International Conference on Data Mining, December 2008, 413–422. Miller, Tom. “Testing Go for Statistics,”. MSDS 431: Data Engineering with Go. Course at Northwestern University, Chicago, IL, June 19, 2023. Miller, Tom. “Data Cleaning, Frames and Pipelines,”. MSDS 431: Data Engineering with Go. Course at Northwestern University, Chicago, IL, June 19, 2023. https://github.com/ThomasWMiller/jump-start-mnist-iforest Miller, Tom. “Command-Line Applications,”. MSDS 431: Data Engineering with Go. Course at Northwestern University, Chicago, IL, July 1, 2023. Miller, Tom. “Crawling and Scraping the Web,”. MSDS 431: Data Engineering with Go. Course at Northwestern University, Chicago, IL, July 2, 2023. ","date":"2023-08-06","objectID":"/PythonRGo/:3:0","tags":null,"title":"Comparing Golang to Python/R","uri":"/PythonRGo/"},{"categories":null,"content":"Neural Decoding of Smell with Generative AI Masters of Science in Data Science Thesis Proposal School of Professional Studies, Northwestern University Abstract Olfaction (sense of smell) and related structural abnormalities in the olfactory bulbs are among the first observed symptoms corelated with Alzhiemer’s disease (Esiri and Wilcock 1984; Thomann et al. 2009). The functional relationship between olfaction and the olfactory bulbs is poorly understood (Weiss et al. 2020). In the area of visual decoding, advances in machine learning using generative adversarial networks (GANs) have provided an unprecedented insight into neural decoding or the mapping of an individual brain’s responses and performance (Seeliger et al. 2018; Van Gerven et al. 2019) when compared to linear models (VanRullen and Reddy 2019). Working on a latent space of reduced dimensions from the neuroimaging data, GANs employ competing (artificial) neural networks – a generator to produce predictions and a discriminator to distinguish the ground truth – to ultimately converge on a model that has learned the mapping between the latent space (a reduced representation of neuroimages) and smell space (identity of odor and pleasantness rating). It is a form of multi-voxel (3-D pixel) pattern analysis (MVPA). I propose applying GANs to a publicly available dataset of neuroimages (fMRI) recorded in real-time after exposure to different smells (Weiss et al. 2019). This dataset is ideal for functional mapping as it includes individuals that pass standardized smell testing but inexplicably do not have any apparent olfactory bulbs. The guiding research question will be to explain how individuals without olfactory bulbs can smell. I hypothesize that there are different regions of interest (ROIs) for individuals without apparent olfactory bulbs and that neural decoding for individuals without olfactory bulbs will take more time than for others. Similar to a visual decoding task on gender by others (VanRullen and Reddy 2019), I will arrange the latent space for the neuroimages corresponding to different ROIs (such as occipital, temporal or frontoparietal lobes) and run a binary decoding task (pleasant vs unpleasant) after each odor stimulus. Understanding olfactory regions of interest is significant for radiologists in differentiating between olfactory symptoms caused by neurodegenerative diseases or other prevalent reasons such as aging (Zou et al. 2016). ","date":"2024-05-23","objectID":"/Neural_Decoding/:1:0","tags":null,"title":"Neural Decoding of Smell","uri":"/Neural_Decoding/"},{"categories":null,"content":"References Esiri, M M, and G K Wilcock. 1984. “The Olfactory Bulbs in Alzheimer’s Disease.” Journal of Neurology, Neurosurgery, and Psychiatry 47 (1): 56–60. Seeliger, K., U. Güçlü, L. Ambrogioni, Y. Güçlütürk, and M. A. J. van Gerven. 2018. “Generative Adversarial Networks for Reconstructing Natural Images from Brain Activity.” NeuroImage 181 (November):775–85. https://doi.org/10.1016/j.neuroimage.2018.07.043. Thomann, Philipp A., Vasco Dos Santos, Pablo Toro, Peter Schönknecht, Marco Essig, and Johannes Schröder. 2009. “Reduced Olfactory Bulb and Tract Volume in Early Alzheimer’s Disease—A MRI Study.” Neurobiology of Aging 30 (5): 838–41. https://doi.org/10.1016/j.neurobiolaging.2007.08.001. Van Gerven, Marcel A. J., Katja Seeliger, Umut Güçlü, and Yağmur Güçlütürk. 2019. “Current Advances in Neural Decoding.” In Explainable AI: Interpreting, Explaining and Visualizing Deep Learning, edited by Wojciech Samek, Grégoire Montavon, Andrea Vedaldi, Lars Kai Hansen, and Klaus-Robert Müller, 11700:379–94. Lecture Notes in Computer Science. Cham: Springer International Publishing. https://doi.org/10.1007/978-3-030-28954-6_21. VanRullen, Rufin, and Leila Reddy. 2019. “Reconstructing Faces from fMRI Patterns Using Deep Generative Neural Networks.” Communications Biology 2 (1): 193. https://doi.org/10.1038/s42003-019-0438-y. Weiss, Tali, Timna Soroka, Lior Gorodisky, Sagit Shushan, Kobi Snitz, Reut Weissgross, Edna Furman-Haran, Thijs Dhollander, and Noam Sobel. 2019. “Human Olfaction Without Apparent Olfactory Bulbs.” https://doi.org/10.18112/openneuro.ds002185.v1.1.0. ———. 2020. “Human Olfaction without Apparent Olfactory Bulbs.” Neuron 105 (1): 35-45.e5. https://doi.org/10.1016/j.neuron.2019.10.006. Zou, Yong-ming, Da Lu, Li-ping Liu, Hui-hong Zhang, and Yu-ying Zhou. 2016. “Olfactory Dysfunction in Alzheimer’s Disease.” Neuropsychiatric Disease and Treatment 12 (April):869–75. https://doi.org/10.2147/NDT.S104886. ","date":"2024-05-23","objectID":"/Neural_Decoding/:2:0","tags":null,"title":"Neural Decoding of Smell","uri":"/Neural_Decoding/"},{"categories":null,"content":"Image classification using neural networks with Python ","date":"2023-08-29","objectID":"/Computer_Vision/:1:0","tags":null,"title":"Computer Vision","uri":"/Computer_Vision/"},{"categories":null,"content":"MNIST dataset This project utilizes the The Modified National Institute of Standards and Technology (MNIST) dataset which comprises of 60 thousand training observations and 10 thousand test observations of handwritten digits. Due to the complexity of imaging data, connectionist network models or neural networks have been gaining significant interest in recent years. Python machine learning packages sklearn and keras have been especially useful for specifying neural network architectures. This project aims to understand how connectionist models improve testing accuracy by varying the number of nodes in the hidden ’layer’ between one (actually not connectionist), two and 128 nodes. Expectedly, neural network models with 128 nodes in the hidden layer performed the best with 97% testing accuracy compared to 31%, 67% for the single node and double node models respectively. Understand the improvement in accuracy with these plots of the class distributions of the activation values in the hidden layer. For a single node in the hidden layer (equivalent to logistic regression), we see some overlap: Increasing the number of nodes in the hidden layer by one, we see better seperation between the classes: See my report for further details. Also, see each experiment for each of the models (single node , double node , many nodes ), as well as preprocessing inputs using principal component analysis (PCA) or ranked inputs from a random forest analysis. ","date":"2023-08-29","objectID":"/Computer_Vision/:1:1","tags":null,"title":"Computer Vision","uri":"/Computer_Vision/"},{"categories":null,"content":"CIFAR-10 dataset The growth of the mobile ecosystem has led to an unprecedented increase in the amount of digital imaging data. Alongside the considerable increase in computing power, deep learning neural networks are becoming an attractive option for computer vision applications in image classification. This study explores different network topologies and hyperparameters for traditional and convolutional neural networks using the CIFAR-10 dataset (Canadian Institute of Advanced Research) of 60,000 images and 10 categories. The best performing model had a testing accuracy score of 77% and was with 3 hidden convolutional layers in a stacked topology with a fully connected layer and dropout regularization. Overall, convolutional neural network models performed better than traditional neural networks suggesting the suitability of convolution for computer vision applications. However, a key drawback is the high processing time in training models with convolutional layers. See my report for further details. Also, see the Jupyter notebooks for each experiment here: Experiment number Description 1 2 layer deep neural network with 2000 neurons 2 3 layer deep neural network with 2000 neurons 3 2 layer deep convolutional neural network with 128, 256 neurons 4 3 layer deep convolutional neural network with 128, 256, 512 neurons 5 2 layer deep neural network with 2000 neurons and 0.3 dropout regularization 6 3 layer deep neural network with 2000 neurons and 0.3 dropout regularization 7 2 layer deep convolutional neural network with 128, 256 neurons and 0.3 dropout regularization 8 3 layer deep convolutional neural network with 128, 256, 512 neurons and 0.3 dropout regularization 9 2 layer deep convolutional neural network with 128, 256 neurons and 0.6 dropout regularization 10 3 layer deep convolutional neural network with 128, 256, 512 neurons, 0.3 dropout regularization and a fully connected classification layer with 100 neurons ","date":"2023-08-29","objectID":"/Computer_Vision/:1:2","tags":null,"title":"Computer Vision","uri":"/Computer_Vision/"},{"categories":null,"content":"Image classification using random forests with Golang This project creates a demo towards implementing a data engineering pipeline from image capture to recognition for an integrated application using purely Golang. For this demonstration, image classification is performed using Golang’s randomForest package employed on MNIST dataset using the GoMNIST driver. Results are compared using an isolation forest (go-iforest) trained on all of the test observations. For information about isolation forests, see an earlier post comparing Golang with Python/R under “Identifying anomalies in MNIST”. The best-performing model utilized 1000 trees and had 96% accuracy on the hold-out test dataset with comparable accuracy for each digit. The average anomaly score was expectedly higher for the misclassified images. Misclassified images from the test set are printed using Go’s image package. To run locally, download or git clone this project: git clone https://github.com/asaraog/msds431week10.git cd msds431week10 ./Week10 cd imagesout ls Images are printed in a new directory ‘imagesout’ with the name coressponding to imageID, predicted digit, true digit and a boolean score for whether or not it is classified as anomalous. A csv file titled ‘goScores.csv’ is also created with information for all of the images and an additional column for the anomaly score. See my Github repository for further details. ","date":"2023-08-29","objectID":"/Computer_Vision/:2:0","tags":null,"title":"Computer Vision","uri":"/Computer_Vision/"},{"categories":null,"content":"References Sambamoorthi, Nethra. “Computer Vision Part 1”. MSDS 458: Artificial Intelligence and Deep Learning. Course at Northwestern University, Chicago, IL, October 9, 2022. https://github.com/aimlfacnwu/MSDS_458_Fall2022/tree/master/MSDS458_Assignment_01 Sambamoorthi, Nethra. “Computer Vision Part 1”. MSDS 458: Artificial Intelligence and Deep Learning. Course at Northwestern University, Chicago, IL, October 23, 2022. https://github.com/aimlfacnwu/MSDS_458_Fall2022/tree/master/MSDS458_Assignment_02 Miller, Tom. “Data Cleaning, Frames and Pipelines,”. MSDS 431: Data Engineering with Go. Course at Northwestern University, Chicago, IL, June 19, 2023. ","date":"2023-08-29","objectID":"/Computer_Vision/:3:0","tags":null,"title":"Computer Vision","uri":"/Computer_Vision/"},{"categories":null,"content":"Deep Learning Classification Models with AG News The volume of digital data such as online news has been growing at an unprecedented pace. Natural language processing can help leverage this data for useful applications such as topic classification. A dataset from AG News of over 120,000 samples of news was classified according to topics - World, Sports, Business and Tech. Term frequency – inverse document frequency (TFIDF) is the classic method and is employed in this study for the vectorization of documents. Various deep learning models were utilized including traditional neural networks, and convolutional neural networks (CNN). Network architecture including number of neurons and other hyperparameters including regularization were varied. This highest accuracy model (78%) was with a 3 layer deep convolutional neural network with 128, 256, 512 neurons and 0.6 dropout regularization. However, a key drawback is the high processing time in training models with TFIDF. Future studies would focus on word embeddings. See my report for further details. Also, see each experiment for each of the models here: Experiment number Description 1 2 layer deep neural network with 2000 neurons 2 3 layer deep neural network with 2000 neurons 3 2 layer deep convolutional neural network with 128, 256 neurons 4 3 layer deep convolutional neural network with 128, 256, 512 neurons 5 2 layer deep neural network with 2000 neurons and 0.3 dropout regularization 6 3 layer deep neural network with 2000 neurons and 0.3 dropout regularization 7 2 layer deep convolutional neural network with 128, 256 neurons and 0.3 dropout regularization 8 3 layer deep convolutional neural network with 128, 256, 512 neurons and 0.3 dropout regularization 9 2 layer deep convolutional neural network with 128, 256 neurons and 0.6 dropout regularization 10 3 layer deep convolutional neural network with 128, 256, 512 neurons and 0.6 dropout regularization ","date":"2023-08-29","objectID":"/NLP/:0:0","tags":null,"title":"Natural Language Processing","uri":"/NLP/"},{"categories":null,"content":"Medical Query Chatbot with DSM-5 data Abstract There is a growing shortage of manpower that can answer frequently asked questions in the medical field – both for patients and providers. Chatbots and automated assistants can leverage natural language processing techniques for useful interactions with humans and reduce the overall healthcare burden. A suitable corpus was derived from the Diagnostics and Statistical Manual of Mental Disorders, Fifth Edition (DSM-5) using the chapters related to anxiety disorders. Term frequency – inverse document frequency (TF-IDF) and a cosine similarity matrix is the classic method and is employed in this study for the vectorization of sentences and ranking of responses respectively. The logic and sensibility of responses were compared for five questions in each model. Various parameters were varied such as stop words for text preprocessing, differing corpus parameters as well as the inclusion of contextual sentences in the response. The best model utilized stop words preprocessing and the inclusion of an additional sentence for the user’s contextual understanding of the chatbot’s response. However, a key drawback is the requirement for using exact keywords in training chatbots with TF-IDF. Future studies would incorporate equivalent classes or embedding representations to gain deep semantic information. See my report and Jupyter notebook for further details. ","date":"2023-08-29","objectID":"/NLP/:1:0","tags":null,"title":"Natural Language Processing","uri":"/NLP/"},{"categories":null,"content":"References Dass, R. 2018. “Create your chatbot using Python NLTK.” Medium. https://medium.com/@ritidass29/create-your-chatbot-using-python-nltk-88809fa621d1 Srinivasan, Syamala. “Creating Chatbot”. MSDS 453: Natural Language Processing. Course at Northwestern University, Chicago, IL, December 4, 2022. ","date":"2023-08-29","objectID":"/NLP/:2:0","tags":null,"title":"Natural Language Processing","uri":"/NLP/"},{"categories":null,"content":"What? In the world of web and desktop applications, frameworks for different software languages such as Rails for Ruby and Electron for JavaScript are popular. Analogous to Rails, Golang uses the Wails framework and offers the benefits of Golang’s reported processing speed. Wails also uses the native rendering engine unlike Electron which uses an embedded browser. Furthermore, Wails integrates user interface (UI) frameworks such as React, Vue and Svelte. To demo Golang’s frontend capabilities, two projects are implemented here using Wails and Svelte: Assisted Writing Application Chatbot ","date":"2023-08-22","objectID":"/Front-end_Applications/:1:0","tags":null,"title":"Front-end development in Go","uri":"/Front-end_Applications/"},{"categories":null,"content":"Assisted Writing Application This project produces a prototype for an assisted writing application based on Vale (an exisiting command line interface written in Golang). It accepts plain text files (.txt or .md) as user input and a style preference as a text input. The output is displayed in the application with support for errors such as invalid user preference, invalid type of text file or insufficient length of text.The application prototype is succesful during development (wails dev) in linking Vale CLI output with user input and displaying errors. However, Wails is unable to integrate with command line applications during build (wails build) for this application. Future implemntations would explore other prose linters that do not require command line dependencies. To run the prototype locally, first install Wails onto your machine and then download this project: xcode-select --install go install github.com/wailsapp/wails/v2/cmd/wails@latest git clone https://github.com/asaraog/msds431week8.git cd msds431week8 wails dev To test for correct application behavior, input 1 or 2 to indicate a style preference and click ‘Lint it’ to upload ’test.txt’. Try entering 3 to generate the appropriate error message. See my Github repository for further details. ","date":"2023-08-22","objectID":"/Front-end_Applications/:2:0","tags":null,"title":"Front-end development in Go","uri":"/Front-end_Applications/"},{"categories":null,"content":"Chatbot This project produces a prototype for a desktop chatbot application. It accepts a single word query as a plain text input and output answers from a knowledge base(by others) represented with Go’s SQL driver. The prototype is capable of integrating NLP concepts such as term frequency-inverse document frequency (TF-IDF). It also includes support for errors such as too many words, no input and no matches. The application prototype is succesful during development AND build in providing the correct answers to user input questions. Further development of the application would first continue in SQL by adding a TF-IDF representation to calculate similarity scores. We can then add ‘fuzzy matching’ and tokenization/lemmatization of the corpus and query. This will have the simplest development process with no dependency required. The single word query is highly amenable to using word2vec. To run the application locally, download or git clone this project: git clone https://github.com/asaraog/msds431week9.git cd msds431week9/build/bin open Week9.app To test for correct chatbot application behavior first type nothing into the text box and then ‘break’, ’test’ and ‘break test’ before clicking ‘Query’ See my Github repository for further details. ","date":"2023-08-22","objectID":"/Front-end_Applications/:3:0","tags":null,"title":"Front-end development in Go","uri":"/Front-end_Applications/"},{"categories":null,"content":"References Miller, Tom. “Desktop Applications,”. MSDS 431: Data Engineering with Go. Course at Northwestern University, Chicago, IL, June 19, 2023. Miller, Tom. “Natural Language Processing,”. MSDS 431: Data Engineering with Go. Course at Northwestern University, Chicago, IL, June 19, 2023. https://github.com/ThomasWMiller/jump-start-sqlite ","date":"2023-08-22","objectID":"/Front-end_Applications/:4:0","tags":null,"title":"Front-end development in Go","uri":"/Front-end_Applications/"},{"categories":null,"content":"What? Concurrency or concurrent processing is breaking up a single process into independent components to coordinate compute. It is based on the idea of CSP or Communicating Sequential Processes (Brookes, Hoare, and Roscoe 1984). In contrast to parallel processing, the paradigm here is shifted towards communication and splitting of independent processes instead of sharing memory. To communicate between different processes, Golang utilizes goroutines, which are similar to channels as described in CSP. Goroutines are lightweight and different from threads in parallel processing. ","date":"2023-08-01","objectID":"/Goroutines/:1:0","tags":null,"title":"Concurrency with Golang","uri":"/Goroutines/"},{"categories":null,"content":"Linear Regression This project evaluated Go’s concurrent programming framework for training and testing linear regression models. Machine learning models will utilize the gonum library. The Go implementation tested linear regression models with varying regulization and/or concurrency using the Boston Housing Study (1970), commonly used by statisticians to predict housing prices by others (Brownlee 2020). This dataset was modified by others (Miller 1999) to remove the feature ‘B’ encoding racial segregation. All models were run 100 times and benchmarked for runtime using ’time’ before commands in the command line and the concurrency flag 0 or 1. Concurrency significantly increased speed with a runtime of 0.009s compared to 0.279s without concurrency. See my Github repository for further details. ","date":"2023-08-01","objectID":"/Goroutines/:2:0","tags":null,"title":"Concurrency with Golang","uri":"/Goroutines/"},{"categories":null,"content":"Running the demo locally Download or git clone this project onto local machine into folder on local machine. git clone https://github.com/asaraog/msds431week6.git cd msds431week6 time ./Week6 -concurrency 0 time ./Week6 -concurrency 1 ","date":"2023-08-01","objectID":"/Goroutines/:2:1","tags":null,"title":"Concurrency with Golang","uri":"/Goroutines/"},{"categories":null,"content":"References Brookes, S. D., C. A. R. Hoare, and A. W. Roscoe. 1984. “A Theory of Communicating Sequential Processes.” Journal of the ACM 31 (3): 560–99. https://doi.org/10.1145/828.833. Brownlee, Jason. 2020. “How to Develop Ridge Regression Models in Python.” MachineLearningMastery.Com (blog). October 8, 2020. https://machinelearningmastery.com/ridge-regression-with-python/. Miller, Tom. “Exploring Concurrency”. MSDS 431: Data Engineering with Go. Course at Northwestern University, Chicago, IL, June 19, 2023. Miller, Thomas W. 1999. “The Boston splits: Sample size requirements for modern regression.” 1999 Proceedings of the Statistical Computing Section of the American Statistical Association, 210–215. ","date":"2023-08-01","objectID":"/Goroutines/:3:0","tags":null,"title":"Concurrency with Golang","uri":"/Goroutines/"},{"categories":null,"content":"Prediction of Bodyfat using a Linear Regression Model and Body Measurements Abstract Bodyfat percentage is an important estimator for health. The most accurate method for measuring bodyfat is by underwater weighing which is time-intensive. Predictive analytics (linear regression) using indirect measurements offer a faster method to compute bodyfat percentage. This study analyzes bodyfat data determined by underwater weighing with their corresponding indirect measurements. To predict the bodyfat using these measurements, we compare a traditional linear model, regularized model, subset models (indicator, dichotomous, piecewise, polynomial), and feature engineering models (principal components analysis). The correlation coefficients (R^2^) are analyzed for each ten-fold cross-validated model. The best R^2^ value (0.67) is found with a traditional linear model, keeping as much information as possible. See my report and Jupyter notebook for further details. ","date":"2022-05-28","objectID":"/Health/:1:0","tags":null,"title":"Machine Learning with Healthcare","uri":"/Health/"},{"categories":null,"content":"Prediction of Heart Disease using a Logistic Regression Model based on Framingham Heart Study Abstract Heart disease is one of the leading causes of mortality among people across the world. Different demographic, behavioral and physiological factors are studied as indicators for coronary heart disease in the Framingham Heart Study (FHS). Predictive classification models can help in the early detection of heart disease as well as inform lifestyle prevention techniques at an affordable cost. This study analyzes 3658 observations of 16 variables from the FHS using a binary classification logistic regression model. Subset models for males and females are evaluated using ten-fold cross-validation with receiver operator characteristic area under the curve (AUC ROC) scores of 0.65 and 0.67 respectively. See my report and Jupyter notebook for further details. ","date":"2022-05-28","objectID":"/Health/:2:0","tags":null,"title":"Machine Learning with Healthcare","uri":"/Health/"},{"categories":null,"content":"Prediction of Diabetes using Classification Models based on Pima Indians study Abstract Diabetes is a chronic health condition that is a significant contributor to the worldwide healthcare burden. The healthcare burden can be drastically reduced with precise early detection and preventative measures. Predictive analytics (tree-based methods) using medical measurements including glucose level and others offer a useful method to diagnose diabetes early. This study analyzes a dataset of female individuals of Pima Indian heritage near Phoenix, Arizona with a high incidence of diabetes. To predict the diagnosis of diabetes using these measurements, we compare traditional logistic regression classification models with and without interactions and tree-based classification methods such as random forest. The areas under the receiver operating characteristic curve (ROC AUC) is analyzed for each five-fold cross-validated model. The best ROC AUC of 0.84 is found using random forest model which naturally takes interactions into account. See my report and Jupyter notebook for further details. ","date":"2022-05-28","objectID":"/Health/:3:0","tags":null,"title":"Machine Learning with Healthcare","uri":"/Health/"},{"categories":null,"content":"References Andersson, Charlotte, Andrew D. Johnson, Emelia J. Benjamin, Daniel Levy, and Ramachandran S. Vasan. 2019. “70-Year Legacy of the Framingham Heart Study.” Nature Reviews Cardiology 2019 16:11 16 (11): 687–98. https://doi.org/10.1038/s41569-019-0202-5. Smith, Jack W, J E Everhart, W C Dicksont, W C Knowler, and R S Johannes. 1988. “Using the ADAP Learning Algorithm to Forecast the Onset of Diabetes Mellitus.” https://www.ncbi.nlm.nih.gov/pmc/articles/PMC2245318/pdf/procascamc00018-0276.pdf. Miller, Tom. “Machine Learning Foundations: Bodyfat”. MSDS 422: Practical Machine Learning. Course at Northwestern University, Chicago, IL, April 24, 2022. Miller, Tom. “Regression and Classfication: Framingham”. MSDS 422: Practical Machine Learning. Course at Northwestern University, Chicago, IL, April 30, 2022. Miller, Tom. “Tree-structured Models: Pima Indians”. MSDS 422: Practical Machine Learning. Course at Northwestern University, Chicago, IL, April 30, 2022. Penrose, Keith W, Arnold G Nelson, and Arnold Garth Fisher. 1985. “Generalized Body Composition Prediction Equations for Men Using Simple Measurement Techniques.” Medicine and Science in Sports and Exercise 17: 189. https://doi.org/10.1249/00005768-198504000-00037. ","date":"2022-05-28","objectID":"/Health/:4:0","tags":null,"title":"Machine Learning with Healthcare","uri":"/Health/"},{"categories":null,"content":"Predicting the Diagnosis of Autism using Classification Models based on fMRI Abstract Autism spectrum disorder is a lifelong neurodevelopmental disorder that is diagnosed based on behavioral and social interaction patterns. Predictive algorithms provide a novel approach in identifying key neurological biomarkers and subsequent psychiatric diagnosis using functional magnetic resonance imaging (fMRI) data. This study analyzes a dataset collected from studies at 17 international locations as part of the Autism Brain Imaging Dataset Exchange (ABIDE). To classify the medical images, we extract regional homogeneity scores and compare random forest models with convolutional neural networks. The accuracy for a five-fold cross validated random forest model and neural network having the highest validation score were found to be 0.57 and 0.54 respectively using the holdout test dataset. See my report and Jupyter notebook for further details. ","date":"2022-05-13","objectID":"/ABIDE/:1:0","tags":null,"title":"Predicting Autism from MRI","uri":"/ABIDE/"},{"categories":null,"content":"References Martino, A. di, C. G. Yan, Q. Li, E. Denio, F. X. Castellanos, K. Alaerts, J. S. Anderson, et al. 2014. “The Autism Brain Imaging Data Exchange: Towards Large-Scale of the Intrinsic Brain Architecture in Autism.” Molecular Psychiatry 19 (6): 659. https://doi.org/10.1038/MP.2013.78. Miller, Tom. “Medical Imaging”. MSDS 422: Practical Machine Learning. Course at Northwestern University, Chicago, IL, May 21, 2022. ","date":"2022-05-13","objectID":"/ABIDE/:2:0","tags":null,"title":"Predicting Autism from MRI","uri":"/ABIDE/"},{"categories":null,"content":"Predicting Colon Cancer Using Clustering Models based on DNA Microarray Data Abstract Colon cancer is a significant public health concern and leading cause of death in the older human population. The healthcare burden can be significantly reduced with earlier detection and preventative measures. Although genetic information has been shown to be altered in the early stage of the disease, DNA sequencing data is highly dimensional and must be analyzed using predictive algorithms. This study analyzes a DNA microarray dataset of 62 tissue samples (normal and cancerous) and 92 genes from the Princeton University Gene Expression Project. To analyze the dataset, the Rand index was compared for clustering models based on DBSCAN, kmeans and hierarchal clustering algorithms (single and ward). The kmeans model performed the best clustering of the data and had the highest Rand index of 0.796. See my report and Jupyter notebook for further details. ","date":"2022-05-10","objectID":"/DNA/:1:0","tags":null,"title":"Machine Learning with DNA","uri":"/DNA/"},{"categories":null,"content":"Classification Models for Gene Families based on DNA Sequencing Abstract The volume of DNA sequencing data has been growing at an unprecedented pace. Predictive algorithms can help leverage this data for useful applications such as gene family classification by using new sequencing data. This study analyzes a dataset for protein coding DNA sequences of 7 different gene families across three different species – human, chimpanzee and dog. Naïve Bayes, random forest, convolutional neural networks and recurrent neural networks were used to classify each gene family with a k-mer count encoding. The Naïve Bayes classifier performed the best on the holdout test dataset with F-1 scores of 0.982, 0.993 and 0.983 for human, chimpanzee and dog respectively. Overfitting was seen with the other models used in the study. See my report and Jupyter notebook for further details. ","date":"2022-05-10","objectID":"/DNA/:2:0","tags":null,"title":"Machine Learning with DNA","uri":"/DNA/"},{"categories":null,"content":"References Miller, Tom. “DNA Microarray Data”. MSDS 422: Practical Machine Learning. Course at Northwestern University, Chicago, IL, May 20, 2022. Miller, Tom. “DNA Sequencing”. MSDS 422: Practical Machine Learning. Course at Northwestern University, Chicago, IL, May 20, 2022. ","date":"2022-05-10","objectID":"/DNA/:3:0","tags":null,"title":"Machine Learning with DNA","uri":"/DNA/"},{"categories":null,"content":"Data Driven Engineering of CRISPR-Cas12a for PAM Recognition Masters of Science in Chemical Engineering Thesis College of Engineering, University of Wisconsin-Madison Abstract We know that amino acids are combined in sequence to constitute proteins for an undefined number of biological functions. Proteins thus evolved for millions of years before being repurposed for human applications in the medical field, food and chemicals. CRISPR enzymes are emerging as a highly versatile workhorse for targeting of specific DNA sequences, useful in biomedicine and biotechnology. Exploring the vast space of possible protein sequences is intractable using traditional protein engineering approaches of rational design and directed evolution. Data-driven methods can greatly accelerate protein engineering strategies and aid in CRISPR enzyme engineering. Data-driven methods also leverage the vast and exponentially growing volume of biological data. Here we design an experimental and computational pipeline to investigate the binding function of CRISPR-Cas12a. CRISPR-Cas12a works as a pair of molecular scissors that are programmed using an RNA molecule to a site with matching genetic material in DNA. An important limitation for human applications is that before they bind to their target DNA site, they must also bind to a protospacer adjacent motif (PAM). We design a library of mutant CRISPR-Cas12a proteins with chimeric sequences made by DNA recombination. To investigate PAM binding function, we develop an assay based on a Green Fluorescent Protein (GFP) reporter system presented by collaborators in the Beisel lab. We generate data on the order of millions of sequences by using long-read DNA sequencing or nanopore sequencing after we performed fluorescence activated cell sorting (FACS) using our assay on our chimeric library. Our assay is reproducible, shown by enrichment analysis on chimeric sequences, which yielded a consensus protein sequence between three sorting replicates. We further demonstrate machine learning methods to investigate a generalized model for CRISPR-Cas12a-PAM binding. See my full report and/or presentation for further details. ","date":"2020-09-01","objectID":"/CRISPR/:1:0","tags":null,"title":"CRISPR protein engineering","uri":"/CRISPR/"},{"categories":null,"content":"References Greenhalgh, Jonathan, Apoorv Saraogee, and Philip A. Romero. 2021. “Data-Driven Protein Engineering.” In Protein Engineering, 133–51. John Wiley \u0026 Sons, Ltd. https://doi.org/10.1002/9783527815128.ch6. Saraogee, Apoorv. 2020. “Data-Driven Engineering of CRISPR-Cas12a for PAM Recognition.” Masters of Science, University of Wisconsin-Madison. ","date":"2020-09-01","objectID":"/CRISPR/:2:0","tags":null,"title":"CRISPR protein engineering","uri":"/CRISPR/"},{"categories":null,"content":"Engineering a chondrogenic microenvironment to promote MSC chondrogenesis Bacherlors of Science in Chemical and Biomolecular Engineering Thesis School of Mechanical Engineering, Georgia Institute of Technology Abstract Osteoarthritis (OA) is characterized by the degradation of articular cartilage and affects 27 million people in the US. Mesenchymal stem cells (MSCs) are a promising cell source for OA therapies because of their immunomodulatory properties and ability to be differentiated along a chondrogenic lineage. Traditional chondrogenic differentiation of MSCs relies on using growth factors such as TGF-βs, but cells rapidly undergo hypertrophy and are not able to withstand the same mechanical load as healthy hyaline cartilage. Decellularized cartilage contains important growth factors and extracellular matrix (ECM) proteins to support chondrogenesis at physiologically relevant concentrations and may be an alternative or additive to improve chondrogenic differentiation. The objective of this study was to investigate whether digested cartilage ECM incorporation into MSC pellets could improve chondrogenic differentiation alone or in combination with exogenous growth factors such as TGF-β1. Porcine articular cartilage was decellularized and then digested in pepsin to form an ECM digest. The ECM digest was incorporated into 250,000 cell pellets at various concentrations to determine an appropriate dose. The ECM digest was then subsequently incorporated into MSCs with and without the addition of TGF-β1. The chondrogenic TGF-β1 treated control with no additional ECM was negative for glycosaminoglycan (GAG) staining after 21 days in culture, so subsequent experiments investigated the role of donor-to-donor variability, passage number, and media composition in affecting MSC chondrogenic differentiation. Chondrogenic differentiation of MSC pellets had better glycosaminoglycan (GAG) content with TGF-β3 induction compared to TGF-β1, but this differentiation was greatly limited in multiple donors with high (\u003ep4) passage number. Future studies will compare ECM addition with chondrogenic induction of MSCs from earlier passages. See my full report for further details. ","date":"2016-06-05","objectID":"/StemCells/:1:0","tags":null,"title":"TGF-β and stem cells for cartilage","uri":"/StemCells/"},{"categories":null,"content":"References Saraogee, Apoorv. 2016. “Engineering a chondrogenic microenvironment to promote MSC chondrogenesis.” Bachelors of Science, Georgia Institute of Technology. http://hdl.handle.net/1853/58470 ","date":"2016-06-05","objectID":"/StemCells/:2:0","tags":null,"title":"TGF-β and stem cells for cartilage","uri":"/StemCells/"}]